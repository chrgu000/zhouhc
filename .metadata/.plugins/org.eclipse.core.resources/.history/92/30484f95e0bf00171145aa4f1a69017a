package cn.ak4j.yard.pcs.configuration;

import java.io.IOException;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import cn.ak4j.Global;
import cn.ak4j.yard.pcs.domain.PcsAuthorityAssets;
import cn.ak4j.yard.pcs.domain.PcsMenus;

@Configuration
public class PCSConfiguration {
	
	private Logger logger = LoggerFactory.getLogger(PCSConfiguration.class);
	
	@Bean 
	public PcsAuthorityAssets initAuthorityAssets() throws IOException{
		PcsAuthorityAssets result = new PcsAuthorityAssets();
		logger.info("load menus.json file from:"+this.getClass().getResource("/menus.json").getFile());
		new Thread(new LoadMenusThread(result)).run();
		return result;
	}
}

class LoadMenusThread implements Runnable{

	private Logger logger = LoggerFactory.getLogger(LoadMenusThread.class);
	
	private PcsAuthorityAssets assets;
	
	public LoadMenusThread(PcsAuthorityAssets assets){
		this.assets = assets;
	}
	
	public void run() {
		try{
			String json = new String(IOUtils.toByteArray(this.getClass().getResource("/menus.json")), Global.defaultCharset);		
			PcsMenus menus = Global.defaultObjectMapper.readValue(json, PcsMenus.class);
			menus.initParentMenu();
			
			assets.setAllMenus(menus);
			assets.setAllSimpleMenus(menus.toSimpleMenus());
			assets.setAllFunctions(menus.getAllFunctions());
			assets.setAllOperations(assets.getAllFunctions().getAllOperations());
			assets.setAllMixedOperations(menus.getAllMixedOperations());
			assets.setAllWebApis(assets.getAllOperations().getAllWebApis());
		}catch(Exception e){
			logger.error("load menus.json occur error", e);
		}
	}
	
}
