package cn.ak4j.yard.spd.bizplan.web;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.ListParam;
import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.yard.enums.PcsAreaType;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.spd.bizplan.domain.SpdMoveAreaBiz;
import cn.ak4j.yard.spd.bizplan.domain.SpdMoveAreaBizs;
import cn.ak4j.yard.spd.bizplan.params.SpdMoveAreaBizParams;
import cn.ak4j.yard.spd.bizplan.repository.SpdMoveAreaBizRepository;
import cn.ak4j.yard.spd.bizplan.service.SpdMoveAreaBizService;
import cn.ak4j.yard.sys.domain.ReportConfig;
import cn.ak4j.yard.sys.domain.YardGlobalInfo;
import cn.ak4j.yard.sys.repository.YardGlobalInfoRepository;
import cn.ak4j.yard.web.PdfExportHelper;

@RestController
public class SpdMoveAreaBizResource {

	@Autowired private PdfExportHelper pdfExportHelper;
	@Autowired private SpdMoveAreaBizRepository mabRepository;
	@Autowired private SpdMoveAreaBizService mabService;
	@Autowired private YardGlobalInfoRepository giRepository;
	
	@RequestMapping(value="/yard/spd/spdMoveAreas",method=RequestMethod.GET)
	public SpdMoveAreaBizs find(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders,
			HttpServletRequest request){
		SpdMoveAreaBizParams params = SpdMoveAreaBizParams.buildParamsFromJson(paramsStr, SpdMoveAreaBizParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		PcsUser user = (PcsUser)request.getAttribute("user");
		return mabRepository.find(params, order, currentPage-1, pageSize, user);
	}
	
	@RequestMapping(value="/yard/spd/spdMoveAreas/count",method=RequestMethod.GET)
	public int findCount(@RequestParam(value = "params", required = false) String paramsStr,
			HttpServletRequest request){
		SpdMoveAreaBizParams params = SpdMoveAreaBizParams.buildParamsFromJson(paramsStr, SpdMoveAreaBizParams.class);
		PcsUser user = (PcsUser)request.getAttribute("user");
		return mabRepository.countByParams(params, user);
	}
	
	
	@RequestMapping(value = "/yard/spd/spdMoveAreas/ids,{ids}", method = RequestMethod.GET)
	public SpdMoveAreaBizs listByIds(@PathVariable(value = "ids", required = false) String ids) {
		SpdMoveAreaBizParams params = new SpdMoveAreaBizParams();
		params.setBizId(new ListParam<String>(Arrays.asList(ids.split(","))));
		return mabRepository.find(params, new OrderParam(), - 1, -1);
	}
	
	@ResponseBody
	@RequestMapping(value = "/yard/spd/spdMoveAreas/bizId,{bizId}/pdf", method = RequestMethod.GET)
	public void getPdf(@PathVariable("bizId")String bizId,HttpServletRequest request,HttpServletResponse response)throws Exception{
		SpdMoveAreaBiz moveAreaBiz = mabService.getFullMoveAreaBiz(bizId);
		
		Map<String,Object> parameters = new HashMap<String, Object>();
		parameters.put("bizCode", moveAreaBiz.getBizCode());
		parameters.put("depotNm", moveAreaBiz.getDepot().getDepotName());
		parameters.put("fromAreaTypeName", PcsAreaType.typeOf(moveAreaBiz.getFromAreaType()).getName());
		parameters.put("toAreaTypeName", PcsAreaType.typeOf(moveAreaBiz.getToAreaType()).getName());
		
		ReportConfig config = giRepository.findAll().findByKey(YardGlobalInfo.completed_move_area_report).getConfig();
		pdfExportHelper.export(config.getJasperFilePath()+".jasper", config.getPdfFileName(), parameters, moveAreaBiz.getItems(), "inline", response);
	}
	
}
