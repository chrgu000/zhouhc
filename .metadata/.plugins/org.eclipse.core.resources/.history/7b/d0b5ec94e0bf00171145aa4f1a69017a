package cn.ak4j.yard.spd.bizplan.web;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.ListParam;
import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.yard.domain.CheckState;
import cn.ak4j.yard.enums.PcsAreaType;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.spd.bizplan.domain.SpdAdjustStockBiz;
import cn.ak4j.yard.spd.bizplan.domain.SpdAdjustStockBizs;
import cn.ak4j.yard.spd.bizplan.params.SpdAdjustStockBizParams;
import cn.ak4j.yard.spd.bizplan.repository.SpdAdjustStockBizRepository;
import cn.ak4j.yard.spd.bizplan.service.SpdAdjustStockBizService;
import cn.ak4j.yard.sys.domain.ReportConfig;
import cn.ak4j.yard.sys.domain.YardGlobalInfo;
import cn.ak4j.yard.sys.repository.YardGlobalInfoRepository;
import cn.ak4j.yard.web.PdfExportHelper;

@RestController
public class SpdAdjustStockBizResource {

	@Autowired private SpdAdjustStockBizRepository asbRepository;
	@Autowired private SpdAdjustStockBizService asbService;
	@Autowired private PdfExportHelper pdfExportHelper;
	@Autowired private YardGlobalInfoRepository giRepository;
	
	@RequestMapping(value = "/yard/spd/spdAdjustStocks", method = RequestMethod.GET)
	public SpdAdjustStockBizs findCommitedPage(
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders,
			HttpServletRequest request) {
		SpdAdjustStockBizParams params = SpdAdjustStockBizParams.buildParamsFromJson(paramsStr, SpdAdjustStockBizParams.class);
		if(params == null){
			params = new SpdAdjustStockBizParams();
		}
		OrderParam order = OrderParam.buildFromJson(orders);
		if(order == null){
			order = new OrderParam();
		}
		PcsUser user = (PcsUser)request.getAttribute("user");
		return asbRepository.find(params, order, currentPage-1, pageSize, user);
	}
	
	@RequestMapping(value = "/yard/spd/spdAdjustStocks/count", method = RequestMethod.GET)
	public long getCommitedCount(@RequestParam(value = "params", required = false) String paramsStr,
						HttpServletRequest request) {
		SpdAdjustStockBizParams params = SpdAdjustStockBizParams.buildParamsFromJson(paramsStr, SpdAdjustStockBizParams.class);
		if(params == null){
			params = new SpdAdjustStockBizParams();
		}
//		params.setCheckStateCode(new ListParam<Integer>(CheckState.commited.getCode()));
		PcsUser user = (PcsUser)request.getAttribute("user");
		return asbRepository.countByParams(params, user);
	}
	
	
	@RequestMapping(value = "/yard/spd/spdAdjustStocks/ids,{ids}", method = RequestMethod.GET)
	public SpdAdjustStockBizs listByIds(@PathVariable(value = "ids", required = false) String ids) {
		SpdAdjustStockBizParams params = new SpdAdjustStockBizParams();
		params.setBizId(new ListParam<String>(Arrays.asList(ids.split(","))));
		return asbRepository.find(params, new OrderParam(), - 1, -1);
	}
	
	@ResponseBody
	@RequestMapping(value = "/yard/spd/spdAdjustStocks/bizId,{bizId}/pdf", method = RequestMethod.GET)
	public void getPdf(@PathVariable("bizId")String bizId,HttpServletRequest request,HttpServletResponse response)throws Exception{
		SpdAdjustStockBiz adjustStock = asbService.getFullAdjustStock(bizId);
		
		Map<String,Object> parameters = new HashMap<String, Object>();
		parameters.put("bizCode", adjustStock.getBizCode());
		parameters.put("adjustTypeNm", adjustStock.getAdjustType().getName());
		parameters.put("areaTypeNm", PcsAreaType.typeOf(adjustStock.getAreaType()).getName());
		parameters.put("orgNm", adjustStock.getDepot().getManageDept().getOrg().getOrgName());
		parameters.put("deptNm", adjustStock.getDepot().getManageDept().getDeptName());
		parameters.put("depotNm", adjustStock.getDepot().getDepotName());

		
		if(adjustStock.getCheckStateCode().equals(CheckState.commited.getCode())){
			ReportConfig config = giRepository.findAll().findByKey(YardGlobalInfo.commited_adjust_stock_report).getConfig();
			pdfExportHelper.export(config.getJasperFilePath()+".jasper", config.getPdfFileName(), parameters, adjustStock.getItems(), "inline", response);
		}else if(adjustStock.getCheckStateCode().equals(CheckState.reviewed.getCode())){
			ReportConfig config = giRepository.findAll().findByKey(YardGlobalInfo.completed_adjust_stock_report).getConfig();
			pdfExportHelper.export(config.getJasperFilePath()+".jasper", config.getPdfFileName(), parameters, adjustStock.getItems(), "inline", response);
		}
	}
}
