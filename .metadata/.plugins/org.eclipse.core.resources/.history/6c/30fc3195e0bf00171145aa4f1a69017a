package cn.ak4j.yard.pcs.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import cn.ak4j.yard.pcs.domain.PcsAuthorityAssets;
import cn.ak4j.yard.pcs.domain.PcsMenus;
import cn.ak4j.yard.pcs.domain.PcsOperations;
import cn.ak4j.yard.pcs.domain.PcsRoleOps;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.domain.PcsUserRoles;
import cn.ak4j.yard.pcs.domain.PcsWebApi;
import cn.ak4j.yard.pcs.domain.PcsWebApis;
import cn.ak4j.yard.pcs.repository.PcsRoleOpRepository;
import cn.ak4j.yard.pcs.repository.PcsUserRoleRepository;

@Service
@SuppressWarnings({"unchecked"})
public class SysAuthorityService {

	
	@Autowired private PcsUserRoleRepository pcsUserRoleRepository;
	@Autowired private PcsRoleOpRepository pcsRoleOpRepository;
	@Autowired private PcsAuthorityAssets authorityAssets;
	
	//获取用户的接口集合
	@Cacheable(value="userWebApisCache", key="#user.getUserCode()")
	public PcsWebApis getWebApisByUser(PcsUser user){
		PcsUserRoles allUserRoles = pcsUserRoleRepository.findAll();
		PcsUserRoles userRoles = allUserRoles.findByUserId(user.getUserId());
		PcsRoleOps roleOps = pcsRoleOpRepository.findAll().findByRoleIds(userRoles.pluck("roleId"));
		
		PcsWebApis myWebApis = authorityAssets.getAllOperations().findByOpIds(roleOps.pluck("opId")).getAllWebApis();
		
		return myWebApis;
	}
	
	public PcsMenus getMenusByUser(PcsUser user){
		PcsUserRoles allUserRoles = pcsUserRoleRepository.findAll();
		PcsUserRoles userRoles = allUserRoles.findByUserId(user.getUserId());
		
		PcsRoleOps roleOps = pcsRoleOpRepository.findAll().findByRoleIds(userRoles.pluck("roleId"));
		List<String> functionIds = roleOps.pluck("functionId");
		PcsMenus menus = authorityAssets.getAllMenus().findByFunctionIds(functionIds);
		return PcsMenus.convertToTreeStructure(authorityAssets.getAllSimpleMenus(), menus);
	}
	
	public PcsOperations getOperationsByUser(PcsUser user){
		PcsUserRoles allUserRoles = pcsUserRoleRepository.findAll();
		PcsUserRoles userRoles = allUserRoles.findByUserId(user.getUserId());
		PcsRoleOps roleOps = pcsRoleOpRepository.findAll().findByRoleIds(userRoles.pluck("roleId"));
		List<String> opIds = roleOps.pluck("opId");
		PcsOperations operations = authorityAssets.getAllOperations().findByOpIds(opIds);
		return operations;
	}
	
	public PcsOperations findOperationsByWebApi(PcsWebApi api){
		PcsOperations result = new PcsOperations();
		authorityAssets.getAllOperations().forEach(operation->{
			operation.getWebApis().forEach(theApi->{
				if(theApi.match(api.getServiceUrl(), api.getServiceMethod())){
					result.add(operation);
				}
			});
		});
		return result;
	}
	
}
