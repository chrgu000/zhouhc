package cn.ak4j.yard.yds.web;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.entity.query.param.QueryParams;
import cn.ak4j.yard.enums.YdsGoodsType;
import cn.ak4j.yard.yds.domain.YdsGoodsLot;
import cn.ak4j.yard.yds.domain.YdsGoodsLots;
import cn.ak4j.yard.yds.params.YdsGoodsLotParams;
import cn.ak4j.yard.yds.repository.YdsGoodsLotRepository;
import cn.ak4j.yard.yds.repository.YdsGoodsRepository;
import cn.ak4j.yard.yds.service.YdsGoodsLotService;
import cn.ak4j.yard.yds.to.YdsUnuseableLotTO;

@RestController
public class YdsGoodsLotResource {

	@Autowired private YdsGoodsLotRepository glRepository;
	@Autowired private YdsGoodsRepository goodsRepository;
	@Autowired private YdsGoodsLotService glService;
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/yard/yds/ydsGoodsLots", method = RequestMethod.GET)
	public YdsGoodsLots list(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders){
		YdsGoodsLotParams params = QueryParams.buildParamsFromJson(paramsStr, YdsGoodsLotParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		YdsGoodsLots allLots = glRepository.findAll();
		if(order != null && order.isNotEmpty() && order.getPropName().indexOf("formatName") > 0){
			allLots.fillGoodss(goodsRepository.findAll());
		}
		if(params.getGoodsType() != null && params.getGoodsType().getValue().contains(YdsGoodsType.drug.getCode())){
			allLots = allLots.findByGoodsIds(goodsRepository.findAll().findByGoodsType(YdsGoodsType.drug.getCode()).getIds());
		}
		if(params.getGoodsType() != null && params.getGoodsType().getValue().contains(YdsGoodsType.equipment.getCode())){
			allLots = allLots.findByGoodsIds(goodsRepository.findAll().findByGoodsType(YdsGoodsType.equipment.getCode()).getIds());
		}
		return allLots.findByPage(params, order, currentPage - 1, pageSize, goodsRepository);
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/yard/yds/ydsGoodsLots/count", method = RequestMethod.GET)
	public int count(@RequestParam(value = "params", required = false) String paramsStr){
		YdsGoodsLotParams params = QueryParams.buildParamsFromJson(paramsStr, YdsGoodsLotParams.class);
		YdsGoodsLots allLots = glRepository.findAll();
		if(params.getGoodsType() != null && params.getGoodsType().getValue().contains(YdsGoodsType.drug.getCode())){
			allLots = allLots.findByGoodsIds(goodsRepository.findAll().findByGoodsType(YdsGoodsType.drug.getCode()).getIds());
		}
		if(params.getGoodsType() != null && params.getGoodsType().getValue().contains(YdsGoodsType.equipment.getCode())){
			allLots = allLots.findByGoodsIds(goodsRepository.findAll().findByGoodsType(YdsGoodsType.equipment.getCode()).getIds());
		}
		return allLots.find(params, goodsRepository).size();
	}
	
	@RequestMapping(value = "/yard/yds/ydsGoodsLots/ids,{ids}", method = RequestMethod.GET)
	public YdsGoodsLots listByIds(@PathVariable(value = "ids", required = false) String ids) {
		return glRepository.findAll().findByIds(Arrays.asList(ids.split(",")));
	}
	
	@RequestMapping(value="/yard/yds/ydsGoodsLots/{id}", method=RequestMethod.GET)
	public YdsGoodsLot get(@PathVariable("id")String id){
		return glRepository.findAll().findById(id);
	}
	
	@RequestMapping(value="/yard/yds/unuseableLots", method = RequestMethod.GET)
	public List<YdsUnuseableLotTO> findUnuseableLots(
			@RequestParam(value = "depotId", required = false)String depotId,
			@RequestParam(value = "areaType", required = false)String areaType,
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders){
		YdsGoodsLotParams params = YdsGoodsLotParams.buildParamsFromJson(paramsStr, YdsGoodsLotParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		if(params == null){
			params = new YdsGoodsLotParams();
		}
		
		YdsGoodsLots goodsLots = glService.findUnuseableLots(params, order, currentPage-1, pageSize, depotId);
		
		YdsUnuseableLotAssember assember = new YdsUnuseableLotAssember();
		List<YdsUnuseableLotTO> unuseableLots = assember.build(goodsLots);
		return unuseableLots;
	}
	
	@RequestMapping(value="/yard/yds/unuseableLots/count", method = RequestMethod.GET)
	public int countUnuseableLots(
			@RequestParam(value = "depotId", required = false)String depotId,
			@RequestParam(value = "areaType", required = false)String areaType,
			@RequestParam(value = "params", required = false) String paramsStr){
		YdsGoodsLotParams params = YdsGoodsLotParams.buildParamsFromJson(paramsStr, YdsGoodsLotParams.class);
		if(params == null){
			params = new YdsGoodsLotParams();
		}
		
		return glService.findUnuseableLots(params, null, -1, -1, depotId).size();
	}
}

class YdsUnuseableLotAssember{
	public List<YdsUnuseableLotTO> build(YdsGoodsLots goodsLots){
		List<YdsUnuseableLotTO> unuseableLotTOs = new ArrayList<YdsUnuseableLotTO>();
		goodsLots.forEach(goodsLot->{
			YdsUnuseableLotTO unseableLotTO = new YdsUnuseableLotTO();
			BeanUtils.copyProperties(goodsLot, unseableLotTO);
			unseableLotTO.setLotId(goodsLot.getGoodsLotId());
			unuseableLotTOs.add(unseableLotTO);
		});
		
		return unuseableLotTOs;
	}
}

