package cn.ak4j.yard.spd.task.service;


import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import cn.ak4j.exception.common.OperateFailException;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.BaseTest;
import cn.ak4j.yard.domain.CheckState;
import cn.ak4j.yard.domain.Constant;
import cn.ak4j.yard.domain.IUser;
import cn.ak4j.yard.domain.MaintenanceInfo;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.repository.PcsDepotRepository;
import cn.ak4j.yard.pcs.repository.PcsUserRepository;
import cn.ak4j.yard.spd.bizplan.domain.SpdBizItem;
import cn.ak4j.yard.spd.bizplan.domain.SpdBizItems;
import cn.ak4j.yard.spd.bizplan.domain.SpdReplenishBiz;
import cn.ak4j.yard.spd.bizplan.repository.SpdReplenishBizRepository;
import cn.ak4j.yard.spd.bizplan.service.SpdReplenishBizService;
import cn.ak4j.yard.spd.domain.SpdDepotCard;
import cn.ak4j.yard.spd.domain.SpdGoodsItems;
import cn.ak4j.yard.spd.repository.SpdDepotCardRepository;
import cn.ak4j.yard.spd.stock.repository.SpdShelfStockRepository;
import cn.ak4j.yard.spd.task.domain.SpdDepotTask;
import cn.ak4j.yard.spd.task.domain.SpdDepotTaskItem;
import cn.ak4j.yard.spd.task.domain.SpdDepotTaskItems;
import cn.ak4j.yard.spd.task.domain.SpdDepotTasks;
import cn.ak4j.yard.spd.task.domain.SpdDispatcher;
import cn.ak4j.yard.spd.task.domain.SpdDispatcherRef;
import cn.ak4j.yard.spd.task.domain.SpdOffShelfTaskItem;
import cn.ak4j.yard.spd.task.enums.SpdDispatcherType;
import cn.ak4j.yard.spd.task.factory.ISpdDepotTaskFactory;
import cn.ak4j.yard.spd.task.repository.SpdDepotTaskItemRepository;
import cn.ak4j.yard.spd.task.repository.SpdDepotTaskRepository;
import cn.ak4j.yard.spd.task.repository.SpdDispatcherRepository;
import cn.ak4j.yard.yds.repository.YdsGoodsLotRepository;
import cn.ak4j.yard.yds.repository.YdsGoodsRepository;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@SuppressWarnings({ "unchecked", "rawtypes" })
public class SpdDispatcherServiceTest extends BaseTest{

	@Autowired private SpdDispatcherService dispatcherService;
	@Autowired private SpdDispatcherRepository dispatcherRepository;
	@Autowired private PcsUserRepository userRepository;
	@Autowired private PcsDepotRepository depotRepository;
	@Autowired private SpdShelfStockRepository ssRepository;
	@Autowired private SpdReplenishBizRepository rbRepository;
	@Autowired private SpdReplenishBizService rbService;
	@Autowired private YdsGoodsRepository goodsRepository;
	@Autowired private YdsGoodsLotRepository glRepository;
	@Autowired private SpdDepotTaskRepository dtRepository;
	@Autowired private SpdDepotTaskItemRepository dtiRepository;
	@Autowired private SpdDepotTaskService dtService;
	@Autowired private SpdDepotCardRepository dcRepository;
	
	@Autowired @Qualifier("oneItemPerBlock") 
	private ISpdDepotTaskFactory oneItemPerBlockFactory;
	
	@Autowired @Qualifier("oneBlockItemPerLot") 
	private ISpdDepotTaskFactory oneItemPerLotBlockFactory;
	
	protected String onShelfDispatcherId = "disp_id_006";
	
	@Rule public ExpectedException thrown = ExpectedException.none();
	
	@Test public void testGetFullDispatcher(){
		SpdDispatcher dispatcher = dispatcherRepository.findWithRelationsById(onShelfDispatcherId);
		assertNotNull(dispatcher);
		assertEquals(SpdDispatcherType.on_shelf.getCode(), dispatcher.getDispatcherType());
		assertEquals(1, dispatcher.getRefs().size());
		for(SpdDispatcherRef ref : dispatcher.getRefs()){
			assertNotNull(ref.getGoodsItems());
			for(SpdBizItem item : (SpdGoodsItems<SpdBizItem>)ref.getGoodsItems()){
				assertNotNull(item);
			}
		}
	}
	
	@Test public void testReviewOnShelfDispatcher(){
		SpdDispatcher dispatcher = dispatcherRepository.findWithRelationsById(onShelfDispatcherId);
		
		assertNotNull(dispatcher);
		IUser user = userRepository.findAll().findById(xykUserId);
		dispatcher = dispatcherService.review(dispatcher, user);
		//检查调度单
		assertEquals(CheckState.reviewed, dispatcher.getCheckState());
		
		//检查上架作业单
		dispatcher = dispatcherRepository.findWithRelationsById(onShelfDispatcherId);
		SpdDepotTasks tasks = dispatcher.getTasks();
		assertEquals(1, tasks.size());
		for(SpdDepotTask task : tasks){
			assertNotNull(task.getItems());
		}
	}
	
	@Test public void testReviewOffShelfDispatcherWithOneItemPerBlockFactory(){
		dispatcherService.setTaskFactory(oneItemPerBlockFactory);
		String offShelfDispatcherId = "disp_id_013";
		
		SpdDispatcher dispatcher = dispatcherRepository.findWithRelationsById(offShelfDispatcherId);
		
		assertNotNull(dispatcher);
		IUser user = userRepository.findAll().findById(xykUserId);
		dispatcher = dispatcherService.review(dispatcher, user);
		
		//检查调度单
		assertEquals(CheckState.reviewed, dispatcher.getCheckState());
		
		//检查下架作业单
		//dispatcher = dispatcherRepository.findWithRelationsById(offShelfDispatcherId);
		SpdDepotTasks tasks = dispatcher.getTasks();
		tasks.fillDepotAreas(depotRepository);
		assertEquals(1, tasks.size());
		
		SpdDepotTask no1Task = tasks.get(0);
		no1Task.getItems().forEach(item->{
			assertTrue(item.getPlanQty()>0);
		});

		//2个可用批次的产品E:批次L1(N个整件)，批次L2(N个整件，一个散件)
		//goodsId:goods_id_021 big_sum:18
		//lotId:goods_lot_id_062 stockQty:3600 
		//lotId:goods_lot_id_061 stockQty:6210 
		//qty:3638
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId021Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("goodsId", "goods_id_021", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId021_lotId062Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("lotId", "goods_lot_id_062", String.class, goodsId021Items));
		assertEquals(200, goodsId021_lotId062Items.size());
		assertEquals(3600, sameLotIdQty(goodsId021_lotId062Items));
		
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId021_lotId061Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("lotId", "goods_lot_id_061", String.class, goodsId021Items));
		assertEquals(3, goodsId021_lotId061Items.size());
		assertEquals(38, sameLotIdQty(goodsId021_lotId061Items));
		

		//一个可用批次的产品G：N个整件，1个散件（库存不足）
		//goodsId:goods_id_026  big_sum:18
		//lotId:goods_lot_id_071 stockQty:2610
		//qty:1
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId026Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("goodsId", "goods_id_026", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId026_lotId071Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("lotId", "goods_lot_id_071", String.class, goodsId026Items));
		assertEquals(1, goodsId026Items.size());
		assertEquals(1, sameLotIdQty(goodsId026_lotId071Items));
		
		//goodsId:goods_id_027 big_sum:8
		//lotId:goods_lot_id_074 stockQty:4448
		//qty:6
		SpdDepotTaskItems goodsId027Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_027", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId027_lotId074_items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_074", String.class, goodsId027Items));
		assertEquals(1, goodsId027_lotId074_items.size());
		assertEquals(6, sameLotIdQty(goodsId027_lotId074_items));
		
		//一个可用批次的产品C:N个整件
		//goodsId:goods_id_004 big_sum:14
		//lotId:goods_lot_id_011 stockQty:1330
		//qty:95
		SpdDepotTaskItems goodsId004Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_004", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId004_lotId021Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_011", String.class, goodsId004Items));
		assertEquals(7, goodsId004_lotId021Items.size());
		assertEquals(95, sameLotIdQty(goodsId004_lotId021Items));
		
		//3个可用批次的产品F:批次1（N个整件），批次L2(N个整件)，批次三(N个整件，一个散件)
		///goodsId:goods_id_035 big_sum:9
		//lotId:goods_lot_id_089 stockQty:1755
		//lotId:goods_lot_id_090 stockQty:4005
		//lotId:goods_lot_id_096 stockQty:22500
		//qty:5772
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_035", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035_lotId089Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_089", String.class, goodsId035Items));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035_lotId090Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_090", String.class, goodsId035Items));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035_lotId096Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_096", String.class, goodsId035Items));
		
		assertEquals(195, goodsId035_lotId089Items.size());
		assertEquals(1755, sameLotIdQty(goodsId035_lotId089Items));
		assertEquals(445, goodsId035_lotId090Items.size());
		assertEquals(4005, sameLotIdQty(goodsId035_lotId090Items));
		assertEquals(2, goodsId035_lotId096Items.size());
		assertEquals(12, sameLotIdQty(goodsId035_lotId096Items));
		assertTrue(existQty(9, goodsId035_lotId096Items));
		
		//一个可用批次的产品B:N个整件、一个散件
		//goodsId:goods_id_025 big_sum:24
		//lotId:goods_lot_id_070 stockQty:12288 
		//qty:60
		SpdDepotTaskItems goodsId025Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_025", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId025_lotId070 = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_070", String.class, goodsId025Items));
		assertEquals(3, goodsId025_lotId070.size());
		assertEquals(60, sameLotIdQty(goodsId025_lotId070));
		assertTrue(existQty(24, goodsId025_lotId070));
		
		//2个可用批次的产品D：批次L1(N个整件)
		//goodsId:goods_id_023 big_sum:6
		//lotId:goods_lot_id_066 stockQty:4925
		//lotId:goods_lot_id_065 stockQty:2100
		//qty:36
		SpdDepotTaskItems goodsId023Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_023", String.class, no1Task.getItems()));
		SpdDepotTaskItems goodsId023_lotId066 = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_066", String.class, goodsId023Items));
		SpdDepotTaskItems goodsId023_lotId065 = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_023", String.class, goodsId023Items));
		assertEquals(6, goodsId023_lotId066.size());
		assertEquals(36, sameLotIdQty(goodsId023_lotId066));
		assertEquals(0, goodsId023_lotId065.size());

		dispatcherService.setTaskFactory(oneItemPerLotBlockFactory);
	}
	
	@Test public void testReviewOffShelfDispatcherWithOneBlockItemPerLotFactory(){
		dispatcherService.setTaskFactory(oneItemPerLotBlockFactory);
		String offShelfDispatcherId = "disp_id_013";
		
		SpdDispatcher dispatcher = dispatcherRepository.findWithRelationsById(offShelfDispatcherId);
		
		assertNotNull(dispatcher);
		IUser user = userRepository.findAll().findById(xykUserId);
		dispatcher = dispatcherService.review(dispatcher, user);
		
		//检查调度单
		assertEquals(CheckState.reviewed, dispatcher.getCheckState());
		
		//检查下架作业单
		//dispatcher = dispatcherRepository.findWithRelationsById(offShelfDispatcherId);
		SpdDepotTasks tasks = dispatcher.getTasks();
		tasks.fillDepotAreas(depotRepository);
		assertEquals(1, tasks.size());
		
		SpdDepotTask no1Task = tasks.get(0);
		no1Task.getItems().forEach(item->{
			assertTrue(item.getPlanQty()>0);
		});

		//2个可用批次的产品E:批次L1(N个整件)，批次L2(N个整件，一个散件)
		//goodsId:goods_id_021 big_sum:18
		//lotId:goods_lot_id_062 stockQty:3600 
		//lotId:goods_lot_id_061 stockQty:6210 
		//qty:3638
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId021Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("goodsId", "goods_id_021", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId021_lotId062Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("lotId", "goods_lot_id_062", String.class, goodsId021Items));
		assertEquals(1, goodsId021_lotId062Items.size());
		assertEquals(3600, sameLotIdQty(goodsId021_lotId062Items));
		
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId021_lotId061Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("lotId", "goods_lot_id_061", String.class, goodsId021Items));
		assertEquals(2, goodsId021_lotId061Items.size());
		assertEquals(38, sameLotIdQty(goodsId021_lotId061Items));
		

		//一个可用批次的产品G：N个整件，1个散件（库存不足）
		//goodsId:goods_id_026  big_sum:18
		//lotId:goods_lot_id_071 stockQty:2610
		//qty:1
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId026Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("goodsId", "goods_id_026", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId026_lotId071Items = new SpdDepotTaskItems<SpdDepotTaskItem>(CollectionUtils.find("lotId", "goods_lot_id_071", String.class, goodsId026Items));
		assertEquals(1, goodsId026Items.size());
		assertEquals(1, sameLotIdQty(goodsId026_lotId071Items));
		
		//goodsId:goods_id_027 big_sum:8
		//lotId:goods_lot_id_074 stockQty:4448
		//qty:6
		SpdDepotTaskItems goodsId027Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_027", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId027_lotId074_items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_074", String.class, goodsId027Items));
		assertEquals(1, goodsId027_lotId074_items.size());
		assertEquals(6, sameLotIdQty(goodsId027_lotId074_items));
		
		//一个可用批次的产品C:N个整件
		//goodsId:goods_id_004 big_sum:14
		//lotId:goods_lot_id_011 stockQty:1330
		//qty:95
		SpdDepotTaskItems goodsId004Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_004", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId004_lotId021Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_011", String.class, goodsId004Items));
		assertEquals(2, goodsId004_lotId021Items.size());
		assertEquals(95, sameLotIdQty(goodsId004_lotId021Items));
		
		//3个可用批次的产品F:批次1（N个整件），批次L2(N个整件)，批次三(N个整件，一个散件)
		///goodsId:goods_id_035 big_sum:9
		//lotId:goods_lot_id_089 stockQty:1755
		//lotId:goods_lot_id_090 stockQty:4005
		//lotId:goods_lot_id_096 stockQty:22500
		//qty:5772
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_035", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035_lotId089Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_089", String.class, goodsId035Items));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035_lotId090Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_090", String.class, goodsId035Items));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId035_lotId096Items = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_096", String.class, goodsId035Items));
		
		assertEquals(1, goodsId035_lotId089Items.size());
		assertEquals(1755, sameLotIdQty(goodsId035_lotId089Items));
		assertEquals(1, goodsId035_lotId090Items.size());
		assertEquals(4005, sameLotIdQty(goodsId035_lotId090Items));
		assertEquals(2, goodsId035_lotId096Items.size());
		assertEquals(12, sameLotIdQty(goodsId035_lotId096Items));
		assertTrue(existQty(9, goodsId035_lotId096Items));
		
		//一个可用批次的产品B:N个整件、一个散件
		//goodsId:goods_id_025 big_sum:24
		//lotId:goods_lot_id_070 stockQty:12288 
		//qty:60
		SpdDepotTaskItems goodsId025Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_025", String.class, no1Task.getItems()));
		SpdDepotTaskItems<SpdDepotTaskItem> goodsId025_lotId070 = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_070", String.class, goodsId025Items));
		assertEquals(2, goodsId025_lotId070.size());
		assertEquals(60, sameLotIdQty(goodsId025_lotId070));
		assertTrue(existQty(12, goodsId025_lotId070));
	
		//2个可用批次的产品D：批次L1(N个整件)，L2(0个整件，0个散件)
		//goodsId:goods_id_023 big_sum:6
		//lotId:goods_lot_id_066 stockQty:4925
		//lotId:goods_lot_id_065 stockQty:2100
		//qty:36
		SpdDepotTaskItems goodsId023Items = new SpdDepotTaskItems(CollectionUtils.find("goodsId", "goods_id_023", String.class, no1Task.getItems()));
		SpdDepotTaskItems goodsId023_lotId066 = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_066", String.class, goodsId023Items));
		SpdDepotTaskItems goodsId023_lotId065 = new SpdDepotTaskItems(CollectionUtils.find("lotId", "goods_lot_id_023", String.class, goodsId023Items));
		assertEquals(1, goodsId023_lotId066.size());
		assertEquals(36, sameLotIdQty(goodsId023_lotId066));
		assertEquals(0, goodsId023_lotId065.size());

		dispatcherService.setTaskFactory(oneItemPerBlockFactory);
	}
	
	@Test public void testViewOnShelfDispatcherWithTurnoverBox(){
		String bizId = "rep_biz_id_004";
		SpdReplenishBiz replenish = rbRepository.findOne(bizId);
		replenish.setBizRuleId("rep_rule_id_10");
		rbRepository.save(replenish);
		PcsUser user = userRepository.findAll().findById(xykUserId);
		rbService.fillAllRelations(replenish);
		
		SpdDepotTaskItems<SpdDepotTaskItem> offShelfTaskItems = replenish.getOffShelfTasks().getAllItems(); 
		
		//仓库作业明细按确认数量按计划执行
		for(SpdDepotTaskItem item : offShelfTaskItems){
			item.confirmAsPlaned();
		}
		dtiRepository.saveAll(offShelfTaskItems);
		offShelfTaskItems.fillGoodsWithUsableLots(goodsRepository, glRepository, ssRepository);
		
		List<String> lotIds = CollectionUtils.pluck("lotId", offShelfTaskItems);
		lotIds.remove(Constant.none);
			
		dtService.batchReview(replenish.getOffShelfTasks(), user);
		wait(3);
		
		replenish = rbRepository.findOne(bizId);
		rbService.fillAllRelations(replenish);
		
		SpdDepotTaskItems<SpdDepotTaskItem> taskItems = replenish.getOnShelfTasks().getAllItems();
		taskItems.forEach(taskItem->{
			if(taskItem instanceof SpdOffShelfTaskItem){
				//TODO 占位断言等待修复该逻辑
				assertTrue(1==2);
				//assertFalse(((SpdOffShelfTaskItem)taskItem).isAnTurnoverBox());
			}
		});
	}
	
	private boolean existQty(int qty, SpdDepotTaskItems<SpdDepotTaskItem> depotTaskItems){
		for(SpdDepotTaskItem item : depotTaskItems){
			if(item.getPlanQty() == qty){
				return true;
			}
		}
		return false;
	}
	
	private int sameLotIdQty(SpdDepotTaskItems<SpdDepotTaskItem> depotTaskItems){
		int result = 0;
		for(SpdDepotTaskItem item : depotTaskItems){
			result += item.getPlanQty();
		}
		return result;
	}
	
	@Test public void testReviewOffshelfDispatcherForDebug(){
//		String fromOrgId = "626";
//		String toOrgId = "626";
//		String fromDepotId = "depot_id_001";
		String toDepotId = "depot_id_003";
		String userId = mzmanagerUserId;
		
		PcsUser user = userRepository.findAll().findById(userId);
		SpdReplenishBiz replenish = new SpdReplenishBiz();
		replenish.setBizRuleId("rep_rule_id_10");
		replenish.setCreatorDepotId(toDepotId);
		replenish.setMaintenanceInfo(new MaintenanceInfo(user));
		
		SpdBizItems items = new SpdBizItems();
		
		Map<String, Integer> map = new HashMap<String, Integer>();
		map.put("goods_id_021", 20);
		
		map.entrySet().forEach(entry->{
			SpdBizItem item = new SpdBizItem();
			item.setPlanQty(entry.getValue());
			item.setGoodsId(entry.getKey());
			item.setUnitPrice(32.5f);
			item.setUnitLv(2);
			items.add(item);
		});
		
		
		replenish.setItems(items);
		replenish = rbService.add(replenish, user);
		wait(5);
		
		SpdDepotTasks tasks = dtRepository.findWithItemsByBizId(replenish.getBizId());
		
		tasks.forEach(task->task.getItems().forEach(item->{
			log.debug("lot:{}, qty:{}", 
						item.getSpecialGoodsLot().getGoodsLotId(),
						item.getPlanQty());
			assertTrue(item.getPlanQty()>0);
		}));
	}
	
	@Test public void testReviewDispatcherByHasNotCard(){
		String dispatcherId = "disp_id_013";
		String goodsId035 = "goods_id_035";
		
		PcsUser user = userRepository.findAll().findById(xykUserId);
		
		SpdDispatcher dispatcher = dispatcherRepository.findWithRelationsById(dispatcherId);
		
		SpdDepotCard depotCard = dispatcher.getDepot().getCards().findEnableCardByGoodsId(goodsId035);
		depotCard.setEnabled(false);
		dcRepository.save(depotCard);
		
		thrown.expect(OperateFailException.class);
		
		dispatcherService.review(dispatcher, user);
	}
}
