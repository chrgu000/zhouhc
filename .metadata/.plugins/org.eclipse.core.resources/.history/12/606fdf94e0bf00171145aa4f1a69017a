package cn.ak4j.yard.spd.bizrule.domain;

import java.io.Serializable;

import javax.persistence.Embeddable;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.ScriptAssert;

import cn.ak4j.yard.domain.IDescribable;
import cn.ak4j.yard.pcs.domain.PcsDepot;
import cn.ak4j.yard.pcs.domain.PcsDepots;
import cn.ak4j.yard.pcs.repository.PcsDepotRepository;
import lombok.Getter;
import lombok.Setter;

/**
* @Description: 申领业务的流向规则
* @author zhengyf
* @date 2017年6月20日 下午3:20:44
* @version V1.0.0
*/

@SuppressWarnings("serial")
@Embeddable
@ScriptAssert(script="_this.fromDepotId != _this.toDepotId", lang = "javascript", alias = "_this", message="发货仓库不能和收货仓库是同一个仓库")
public class SpdReplenishDirectionRule implements Serializable, IChildRule, IDescribable{
	
	@NotNull(message="发货仓库不能为空") @Getter @Setter
	private String fromDepotId;
	
	@NotNull(message="发货仓库货区类型不能为空") @Getter @Setter
	private String fromDepotAreaType;
	
	@NotNull(message="收货仓库不能为空") @Getter @Setter
	private String toDepotId;
	
	@NotNull(message="收货仓库货区类型不能为空") @Getter @Setter
	private String toDepotAreaType;
	
	@Transient @Getter @Setter
	private PcsDepot fromDepot;
	
	@Transient @Getter @Setter
	private PcsDepot toDepot;

	@Override
	public String getDescription() {
		if(fromDepot!=null && toDepot!=null){
			return String.format("%s>%s", fromDepot.getDepotName(), toDepot.getDepotName());
		}
		return null;
	}
	
	public boolean equals(SpdReplenishDirectionRule rule){
		if(getFromDepotId().equals(rule.getFromDepotId())
			&& getToDepotId().equals(rule.getToDepotId())
			&& getFromDepotAreaType().equals(rule.getFromDepotAreaType())
			&& getToDepotAreaType().equals(rule.getToDepotAreaType())){
			return true;
		}
		return false;
	}


	public void fillDepotRelations(PcsDepotRepository depotRepository) {
		PcsDepots allDepots = depotRepository.findAllWithRelations();
		PcsDepot fromDepot = allDepots.findById(getFromDepotId());
		PcsDepot toDepot = allDepots.findById(getToDepotId());
		setFromDepot(fromDepot);
		setToDepot(toDepot);
	}
}
