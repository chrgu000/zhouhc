package cn.ak4j.yard.spd.task.domain;

import java.util.List;

import cn.ak4j.entity.Entities;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.domain.CheckState;
import cn.ak4j.yard.pcs.domain.PcsDepot;
import cn.ak4j.yard.pcs.domain.PcsDepots;

@SuppressWarnings({"serial"})
public class SpdLogisticsTasks extends Entities<SpdLogisticsTask>{
	public SpdLogisticsTasks(){
		super();
	}
	
	public SpdLogisticsTasks(List<SpdLogisticsTask> logisticsTasks){
		super(logisticsTasks);
	}

	public void fillItems(SpdLogisticsTaskItems items) {
		this.forEach(task->{
			task.setItems(new SpdLogisticsTaskItems(CollectionUtils.find("taskId", task.getTaskId(), items)));
		});
	}

	public SpdLogisticsTaskItems getAllItems() {
		SpdLogisticsTaskItems result = new SpdLogisticsTaskItems();
		this.forEach(task->{
			result.addAll(task.getItems());
		});
		return result;
	}
	

	public boolean isAllCommited() {
		boolean result = true;
		for(SpdLogisticsTask task : this){
			if(task.getCheckState() != CheckState.commited){
				result = false;
			}
		};
		return result;
	}

	public boolean isAllReviewed() {
		boolean result = true;
		for(SpdLogisticsTask task : this){
			if(task.getCheckState() != CheckState.reviewed){
				result = false;
			}
		};
		return result;
	}

	public SpdLogisticsTask findById(String taskId) {
		return CollectionUtils.findWhere("taskId", taskId, this);
	}

	public void fillDepot(PcsDepots allDepots) {
		for(SpdLogisticsTask task : this){
			PcsDepot fromDepot = CollectionUtils.findWhere("depotId", task.getFromDepotId(), allDepots);
			PcsDepot toDepot = CollectionUtils.findWhere("depotId", task.getToDepotId(), allDepots);
			
			task.setFromDepot(fromDepot);
			task.setToDepot(toDepot);
		}
	}
}
