package cn.ak4j.yard.spd.bizplan.web;

import java.util.Arrays;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.yard.domain.Constant;
import cn.ak4j.yard.domain.MaintenanceInfo;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.domain.PcsUserToken;
import cn.ak4j.yard.spd.bizplan.domain.SpdBizItem;
import cn.ak4j.yard.spd.bizplan.domain.SpdReturnGoodsBiz;
import cn.ak4j.yard.spd.bizplan.domain.SpdReturnGoodsBizs;
import cn.ak4j.yard.spd.bizplan.params.SpdReturnGoodsBizParams;
import cn.ak4j.yard.spd.bizplan.repository.SpdReturnGoodsBizRepository;
import cn.ak4j.yard.spd.bizplan.service.SpdReturnGoodsBizService;

@RestController
public class SpdReturnGoodsBizResource {

	@Autowired private SpdReturnGoodsBizService rgbService;
	@Autowired private SpdReturnGoodsBizRepository rgbRepository;
	
	@RequestMapping(value="/yard/spd/spdReturnGoodss/iTakeChargeOfReturnGoodss/uncompleteReturnGoodss", method = RequestMethod.GET)
	public SpdReturnGoodsBizs findUncompleteReturnGoodss(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders,
			HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		
		SpdReturnGoodsBizParams params = SpdReturnGoodsBizParams.buildParamsFromJson(paramsStr, SpdReturnGoodsBizParams.class);
		if(params == null){
			params = new SpdReturnGoodsBizParams();
		}
		
		OrderParam order  = OrderParam.buildFromJson(orders);
		
		return rgbService.findUncompleteReturnGoodss(user, params, order, currentPage-1, pageSize);
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodss/iTakeChargeOfReturnGoodss/uncompleteReturnGoodss/count", method = RequestMethod.GET)
	public int CountUncompleteReturnGoodss(@RequestParam(value = "params", required = false) String paramsStr, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		
		SpdReturnGoodsBizParams params = SpdReturnGoodsBizParams.buildParamsFromJson(paramsStr, SpdReturnGoodsBizParams.class);
		if(params == null){
			params = new SpdReturnGoodsBizParams();
		}
		
		return rgbService.findUncompleteReturnGoodss(user, params, null, -1, -1).size();
	}
	
	
	@RequestMapping(value="/yard/spd/spdReturnGoodss/iTakeChargeOfReturnGoodss/completedReturnGoodss", method = RequestMethod.GET)
	public SpdReturnGoodsBizs findCompletedReturnGoodss(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders,
			HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		
		SpdReturnGoodsBizParams params = SpdReturnGoodsBizParams.buildParamsFromJson(paramsStr, SpdReturnGoodsBizParams.class);
		if(params == null){
			params = new SpdReturnGoodsBizParams();
		}
		
		OrderParam order  = OrderParam.buildFromJson(orders);
		
		return rgbService.findCompletedReturnGoodss(user, params, order, currentPage-1, pageSize);
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodss/iTakeChargeOfReturnGoodss/completedReturnGoodss/count", method = RequestMethod.GET)
	public int CountCompletedReturnGoodss(@RequestParam(value = "params", required = false) String paramsStr, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		
		SpdReturnGoodsBizParams params = SpdReturnGoodsBizParams.buildParamsFromJson(paramsStr, SpdReturnGoodsBizParams.class);
		if(params == null){
			params = new SpdReturnGoodsBizParams();
		}
		
		return rgbService.findCompletedReturnGoodss(user, params, null, -1, -1).size();
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodss/ids,{ids}")
	public SpdReturnGoodsBizs getByIds(@PathVariable("ids")String ids){
		return rgbRepository.findByIds(Arrays.asList(ids.split(",")));
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodss/{id}/informStatus")
	public SpdReturnGoodsBiz updateInformed(@PathVariable("id")String id, HttpServletRequest request) throws Exception{
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReturnGoodsBiz returnGoods = rgbRepository.findOne(id);
		returnGoods = rgbService.informSupplier(returnGoods, user);
		return returnGoods;
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodss", method=RequestMethod.POST)
	public SpdReturnGoodsBiz add(@RequestBody SpdReturnGoodsBiz returnGoods, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		String accessToken = request.getAttribute(Constant.access_token_attr_name).toString();
		String clientType = PcsUserToken.getClientTypeFromAccessToken(accessToken);
		returnGoods.setMaintenanceInfo(new MaintenanceInfo(user));
		returnGoods.setChannelTypeCode(clientType);
		returnGoods = rgbService.add(returnGoods, user);
		return returnGoods;
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodsItems/{itemId}", method=RequestMethod.DELETE)
	public String deleteItem(@PathVariable("itemId")String itemId, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute(Constant.user_attr_name);
		rgbService.deleteItem(itemId, user);
		return "ok";
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodsItems/{itemId}", method=RequestMethod.PUT)
	public SpdBizItem modifyItem(@PathVariable("itemId")String itemId, @RequestBody SpdBizItem bizItem, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute(Constant.user_attr_name);
		bizItem = rgbService.modifyItem(bizItem, user);
		return bizItem;
	}
	
	@RequestMapping(value="/yard/spd/spdReturnGoodsItems", method=RequestMethod.POST)
	public SpdBizItem addItem(@RequestBody SpdBizItem bizItem, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute(Constant.user_attr_name);
		bizItem = rgbService.addItem(bizItem, user);
		return bizItem;
	}
}
