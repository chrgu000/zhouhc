package cn.ak4j.yard.spd.bizrule.web;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.domain.Constant;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.repository.PcsDepotRepository;
import cn.ak4j.yard.spd.bizplan.domain.SpdReplenishOperation;
import cn.ak4j.yard.spd.bizrule.domain.SpdReplenishContractRule;
import cn.ak4j.yard.spd.bizrule.domain.SpdReplenishDirectionRule;
import cn.ak4j.yard.spd.bizrule.domain.SpdReplenishGoodsRule;
import cn.ak4j.yard.spd.bizrule.domain.SpdReplenishRule;
import cn.ak4j.yard.spd.bizrule.domain.SpdReplenishRules;
import cn.ak4j.yard.spd.bizrule.domain.SpdReplenishTaskRule;
import cn.ak4j.yard.spd.bizrule.params.SpdReplenishRuleParams;
import cn.ak4j.yard.spd.bizrule.repository.SpdBizRuleRepository;
import cn.ak4j.yard.spd.bizrule.service.SpdBizRuleService;
import cn.ak4j.yard.spd.bizrule.to.SpdReplenishRuleTO;

@RestController
public class SpdReplenishRuleResource {

	@Autowired private SpdBizRuleRepository brRepository;
	@Autowired private SpdBizRuleService brService;
	@Autowired private PcsDepotRepository depotRepository;
	private SpdReplenishRuleAssember assember = new SpdReplenishRuleAssember();
	
	@RequestMapping(value="/yard/spd/spdReplenishRules", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> list(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders){
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules();
		rules = new SpdReplenishRules(rules.findByPage(params, order, currentPage-1, pageSize));
		return assember.buildList(rules);
	}
	

	@RequestMapping(value="/yard/spd/spdReplenishRules/count", method=RequestMethod.GET)
	public int count(@RequestParam(value = "params", required = false) String paramsStr){
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules();
		rules = new SpdReplenishRules(rules.find(params));
		return assember.buildList(rules).size();
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/ids,{ids}", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> getByIds(@PathVariable(value = "ids", required = false) String ids){
		SpdReplenishRules rules =  new SpdReplenishRules(brRepository.findAllWithRelations().getAllReplenishRules().findByIds(Arrays.asList(ids.split(","))));
		return assember.buildList(rules);
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/whichICanApply", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> whichICanApply(@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute(Constant.user_attr_name);
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		SpdReplenishRules whichCanApplyRules =  new SpdReplenishRules(brRepository.findAllWithRelations().getAllEnabledReplenishRules().whichCanApplyByUser(user));
		SpdReplenishRules rules = new SpdReplenishRules(whichCanApplyRules.findByPage(params, order, -1, -1));
		return assember.buildList(rules);
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/whichICanConfirm", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> whichICanConfirm(@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute(Constant.user_attr_name);
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		SpdReplenishRules enabledReplenishRules = brRepository.findAllWithRelations().getAllEnabledReplenishRules();
		SpdReplenishRules rules =  new SpdReplenishRules(enabledReplenishRules.getWhichCanConfirmByUser(user).findByPage(params, order, -1, -1));
		return assember.buildList(rules);
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/ids,{ids}/myBizOperations", method = RequestMethod.GET)
	public List<SpdReplenishOperation> getMyOperations(@PathVariable("ids")String ids, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReplenishRules rules =  new SpdReplenishRules(brRepository.findAllWithRelations().getAllReplenishRules().findByIds(Arrays.asList(ids.split(","))));
		
		List<SpdReplenishOperation> result = rules.getReplenishOperationByUser(user);
		return result;
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/applyRules", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> listApplyRules(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders){
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules().getAllApplyRules();
		rules = new SpdReplenishRules(rules.findByPage(params, order, currentPage-1, pageSize));
		return assember.buildList(rules);
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/toDepotAllocateRules", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> listToDepotAllocateRules(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders){
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules().getAllToDepotAllocateRules();
		rules = new SpdReplenishRules(rules.findByPage(params, order, currentPage-1, pageSize));
		return assember.buildList(rules);
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/fromDepotAllocateRules", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> listFromDepotAllocateRules(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders){
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules().getAllFromDepotAllocateRules();
		rules = new SpdReplenishRules(rules.findByPage(params, order, currentPage-1, pageSize));
		return assember.buildList(rules);
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/returnApplyRules", method=RequestMethod.GET)
	public List<SpdReplenishRuleTO> listReturnApplyRules(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders){
		SpdReplenishRuleParams params = SpdReplenishRuleParams.buildParamsFromJson(paramsStr, SpdReplenishRuleParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules();
		rules = new SpdReplenishRules(rules.findByPage(params, order, currentPage-1, pageSize));
		return assember.buildList(rules);
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules", method=RequestMethod.POST)
	public SpdReplenishRuleTO add(@RequestBody SpdReplenishRuleTO replenishRuleTO, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReplenishRule rule = assember.build(replenishRuleTO);
		
		rule.getDirectionRule().fillDepotRelations(depotRepository);
		
		rule = (SpdReplenishRule) brService.add(rule, user);
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules();

		replenishRuleTO = assember.build(CollectionUtils.findWhere("id", rule.getId(), rules));
		return replenishRuleTO;
	}
	
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/{id}", method=RequestMethod.PUT)
	public SpdReplenishRuleTO modify(@RequestBody SpdReplenishRuleTO replenishRuleTO, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReplenishRule rule = assember.build(replenishRuleTO);
		
		rule.getDirectionRule().fillDepotRelations(depotRepository);
		
		rule = (SpdReplenishRule) brService.modify(rule, user);
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules();
		replenishRuleTO = assember.build(CollectionUtils.findWhere("id", rule.getId(), rules));
		
		return replenishRuleTO;
	}
	
	@RequestMapping(value="/yard/spd/spdReplenishRules/{id}", method=RequestMethod.GET)
	public SpdReplenishRuleTO get(@PathVariable("id")String id){
		SpdReplenishRules rules = brRepository.findAllWithRelations().getAllReplenishRules();
		SpdReplenishRuleTO replenishRuleTO = assember.build(CollectionUtils.findWhere("id", id, rules));
		return replenishRuleTO;
	}
	
}


class SpdReplenishRuleAssember{
	
	public List<SpdReplenishRuleTO> buildList(SpdReplenishRules rules){
		List<SpdReplenishRuleTO> result = new ArrayList<SpdReplenishRuleTO>();
		
		rules.forEach(rule->{
			SpdReplenishRuleTO to = build(rule);
			result.add(to);
		});
		
		return result;
	}
	
	public SpdReplenishRuleTO build(SpdReplenishRule rule){
		SpdReplenishRuleTO to = new SpdReplenishRuleTO();
		
		BeanUtils.copyProperties(rule.getDirectionRule(), to);
		BeanUtils.copyProperties(rule.getContractRule(), to);
		BeanUtils.copyProperties(rule.getGoodsRule(), to);
		BeanUtils.copyProperties(rule.getTaskRule(), to);
		
		BeanUtils.copyProperties(rule, to);	
		to.setPrimaryName(rule.getPrimaryName());	
		return to;
	}
	
	public SpdReplenishRule build(SpdReplenishRuleTO to){
		SpdReplenishRule rule = new SpdReplenishRule();
		
		SpdReplenishDirectionRule directionRule = new SpdReplenishDirectionRule();
		BeanUtils.copyProperties(to, directionRule);
		rule.setDirectionRule(directionRule);
		
		SpdReplenishContractRule contractRule = new SpdReplenishContractRule();
		BeanUtils.copyProperties(to, contractRule);
		rule.setContractRule(contractRule);
		
		SpdReplenishTaskRule taskRule = new SpdReplenishTaskRule();
		BeanUtils.copyProperties(to, taskRule);
		rule.setTaskRule(taskRule);
		
		SpdReplenishGoodsRule goodsRule = new SpdReplenishGoodsRule();
		BeanUtils.copyProperties(to, goodsRule);
		rule.setGoodsRule(goodsRule);
		
		BeanUtils.copyProperties(to, rule);
		rule.setCreateTime(new Date());
		rule.setLastUpdateTime(new Date());
		return rule;
	}
	
}
