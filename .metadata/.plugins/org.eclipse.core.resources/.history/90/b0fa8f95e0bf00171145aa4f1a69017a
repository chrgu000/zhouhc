package cn.ak4j.yard.configuration;

import javax.annotation.PostConstruct;

import org.apache.catalina.Context;
import org.apache.catalina.webresources.StandardRoot;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;
import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import cn.ak4j.yard.web.AccessCheckInterceptor;
import cn.ak4j.yard.web.CommonFilter;
import cn.ak4j.yard.web.CommonResource;

@EnableWebMvc
@Configuration
public class WebAppConfig extends WebMvcConfigurerAdapter{
	private Logger _logger = LoggerFactory.getLogger(WebAppConfig.class);
	
	//@Autowired private Environment environment;
	
	@Autowired private AccessCheckInterceptor accessTokenInterceptor;
	private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
	        "classpath:/META-INF/resources/", "classpath:/resources/",
	        "classpath:/static/", "classpath:/public/" };
	
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(accessTokenInterceptor);
	}
	
	@Bean
	@PostConstruct
	public CommonResource commonResource() throws InstantiationException, IllegalAccessException, ClassNotFoundException{
		return (CommonResource)Class.forName("cn.ak4j.yard.web.CommonResourceEnhanced").newInstance();
	}
	
	@Bean
	public CommonFilter commonFilter(){
		return new CommonFilter();
	}

	@Override
	public void configurePathMatch(PathMatchConfigurer configurer) {
	    super.configurePathMatch(configurer);
	    configurer.setUseSuffixPatternMatch(false);
	}
	
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
	    registry.addResourceHandler("/**").addResourceLocations(CLASSPATH_RESOURCE_LOCATIONS);
	}
	
	@Bean
	public EmbeddedServletContainerFactory servletContext(){
		return new TomcatEmbeddedServletContainerFactory(){
			
			@Override
			protected void postProcessContext(Context context) {
				final int cacheSize = 80*1024;
				StandardRoot standardRoot = new StandardRoot(context);
				standardRoot.setCacheMaxSize(cacheSize);
				context.setResources(standardRoot);
				
				_logger.info("New cache size (KB): {}", context.getResources().getCacheMaxSize());
			}
			
		};
	}
	
}
