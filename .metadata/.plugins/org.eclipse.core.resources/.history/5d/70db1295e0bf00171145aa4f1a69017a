package cn.ak4j.yard.spd.bizplan.domain;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import cn.ak4j.exception.common.OperateFailException;
import cn.ak4j.yard.domain.StateFlowTemplates;
import cn.ak4j.yard.enums.YardChannelType;
import cn.ak4j.yard.enums.YardExceptionType;
import cn.ak4j.yard.pcs.domain.PcsDepot;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.domain.PcsUsers;
import cn.ak4j.yard.spd.bizplan.enums.SpdBizType;
import cn.ak4j.yard.spd.bizrule.domain.SpdConsumeRule;
import cn.ak4j.yard.spd.task.domain.SpdDepotTask;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

/**
* @Description: 消耗业务
* @author zhengyf
* @date 2017年7月25日 下午7:19:05
* @version V1.0.0
*/

@Slf4j
@SuppressWarnings("serial")
@Entity
@Table(name="spd_consume_biz")
@JsonIgnoreProperties(ignoreUnknown=true)
public class SpdConsumeBiz extends SpdGoodsBizPlan<SpdConsumeRule>{
	
	@Transient @Getter
	private final String stateFlow = StateFlowTemplates.statesFlow_n_r_f;
	
	@Getter @Setter
	private String depotId;
	
	@Getter @Setter
	private String areaType;
	
	@Transient @JsonIgnore @Getter @Setter
	private PcsDepot depot;
	
	@Transient @JsonIgnore @Getter @Setter
	private SpdDepotTask offShelfTask; 

	@Override
	public PcsDepot getStockChangeDepot() {
		return getDepot();
	}

	@Override
	public String getTargetAreaType() {
		return getAreaType();
	}

	@Override
	public SpdBizType getBizType() {
		return SpdBizType.consume_biz;
	}

	@Override
	public void applyRule(SpdConsumeRule rule, PcsUser user) {
		if(!rule.canApplyByUser(user)){
			throw new OperateFailException(YardExceptionType.forbid_can_not_apply_biz, rule.getDepotId(), rule.getDisplayName());
		}
		setBizRule(rule);
		
		setBizRuleId(rule.getId());
		setDepotId(rule.getDepotId());
		setCreatorDepotId(rule.getDepotId());
		setAreaType(rule.getAreaType());
	}
	
	public void setBizRule(SpdConsumeRule bizRule){
		super.setBizRule(bizRule);
		if(bizRule == null){
			return ;
		}
		setDepot(bizRule.getDepot());
	}

	/**
	 * 如果由EIS渠道发起:
	 * 1) 当前消耗业务的创建用户存在并能发起将其作为执行用户
	 * 2) 如果消耗业务的创建用户不存在或没有发起权限则使用代理用户
	 */
	public PcsUser determinCreateUser(SpdConsumeRule rule, PcsUser user, PcsUsers allUsers) {
		PcsUser createUser = null;
		
		if(getChannelType() == YardChannelType.eis){
			//尝试使用申领计划中的用户作为执行用户
			String createUserId = null;
			if(getMaintenanceInfo() != null && StringUtils.isNotEmpty(getMaintenanceInfo().getCreateUserId())){
				createUserId = getMaintenanceInfo().getCreateUserId();
				createUser = allUsers.findById(createUserId);
			}
			
			//校验用户是否存在
			if(createUser == null){
				throw new OperateFailException(YardExceptionType.not_found_apply_user, createUserId);
			}
			
			if(!rule.canApplyByUser(createUser)){
				createUserId = rule.getDepot().getManageDept().getDefaultUserId();
				createUser = allUsers.findById(createUserId);
				if(createUser == null){
					throw new OperateFailException(YardExceptionType.not_found_default_user, rule.getDepot().getManageDept().getDeptCode(), rule.getDepot().getManageDept().getDeptName());
				}
				log.info("EIS同步消耗，消耗计划中的用户没有发起能力，采用代理用户[{}]发起，管理部门：{}", createUserId, rule.getDepot().getManageDept().getDeptId());
			}	
		}else{
			createUser = user;
		}
		
		return createUser;
	}
	
}
