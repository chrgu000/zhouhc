package cn.ak4j.yard.spd.bizplan.web;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.ListParam;
import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.domain.Constant;
import cn.ak4j.yard.domain.MaintenanceInfo;
import cn.ak4j.yard.pcs.domain.PcsDepots;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.domain.PcsUserToken;
import cn.ak4j.yard.pcs.repository.PcsDepotRepository;
import cn.ak4j.yard.spd.bizplan.domain.SpdReceiveBiz;
import cn.ak4j.yard.spd.bizplan.domain.SpdReceiveBizs;
import cn.ak4j.yard.spd.bizplan.params.SpdReceiveBizParams;
import cn.ak4j.yard.spd.bizplan.repository.SpdReceiveBizRepository;
import cn.ak4j.yard.spd.bizplan.service.SpdReceiveBizService;
import cn.ak4j.yard.sys.domain.ReportConfig;
import cn.ak4j.yard.sys.domain.YardGlobalInfo;
import cn.ak4j.yard.sys.repository.YardGlobalInfoRepository;
import cn.ak4j.yard.web.PdfExportHelper;

@RestController
public class SpdReceiveBizResource {
	
	@Autowired private PdfExportHelper pdfExportHelper;
	@Autowired private SpdReceiveBizRepository rbRepository;
	@Autowired private SpdReceiveBizService rbService;
	@Autowired private PcsDepotRepository depotRepository;
	@Autowired private YardGlobalInfoRepository giRepository;

	@RequestMapping(value = "/yard/spd/spdReceives/iTakeChargeOfReceives/uncompleteReceives", method = RequestMethod.GET)
	public SpdReceiveBizs findUncompleteReceives(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReceiveBizParams params = SpdReceiveBizParams.buildParamsFromJson(paramsStr, SpdReceiveBizParams.class);
		if(params == null){
			params = new SpdReceiveBizParams();
		}

		OrderParam order = OrderParam.buildFromJson(orders);
		
		return rbService.findUncompleteReceives(user, params, order, currentPage-1, pageSize);
	}
	
	@RequestMapping(value = "/yard/spd/spdReceives/iTakeChargeOfReceives/uncompleteReceives/count", method = RequestMethod.GET)
	public int countUncompleteReceives(@RequestParam(value = "params", required = false) String paramsStr, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReceiveBizParams params = SpdReceiveBizParams.buildParamsFromJson(paramsStr, SpdReceiveBizParams.class);
		if(params == null){
			params = new SpdReceiveBizParams();
		}
		
		return rbService.findUncompleteReceives(user, params, null, -1, -1).size();
	}
	
	@RequestMapping(value = "/yard/spd/spdReceives/iTakeChargeOfReceives/completedReceives", method = RequestMethod.GET)
	public SpdReceiveBizs findCompletedReceives(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReceiveBizParams params = SpdReceiveBizParams.buildParamsFromJson(paramsStr, SpdReceiveBizParams.class);
		if(params == null){
			params = new SpdReceiveBizParams();
		}

		OrderParam order = OrderParam.buildFromJson(orders);
		
		return rbService.findCompletedReceives(user, params, order, currentPage-1, pageSize);
	}
	
	@RequestMapping(value = "/yard/spd/spdReceives/iTakeChargeOfReceives/completedReceives/count", method = RequestMethod.GET)
	public int countCompletedReceives(@RequestParam(value = "params", required = false) String paramsStr, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReceiveBizParams params = SpdReceiveBizParams.buildParamsFromJson(paramsStr, SpdReceiveBizParams.class);
		if(params == null){
			params = new SpdReceiveBizParams();
		}
		
		return rbService.findCompletedReceives(user, params, null, -1, -1).size();
	}
	
	@RequestMapping(value ="/yard/spd/spdReceives/ids,{bizIds}", method = RequestMethod.GET)
	public SpdReceiveBizs listByIds(@PathVariable(value = "bizIds", required = false) String bizIds, HttpServletRequest request) {
//		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReceiveBizParams params = new SpdReceiveBizParams();
		params.setBizId(new ListParam<String>(Arrays.asList(bizIds.split(","))));
//		PcsDepots depots = depotRepository.findAll().findDeptManageDepot(user.getDeptId());
//		if(depots.size()<=0){
//			return new SpdReceiveBizs();
//		}
//		params.setToDepotId(new ListParam<String>(depots.getIds()));
		return rbRepository.find(params, new OrderParam(), - 1, -1);
	}
	
	//TODO: 由前端设置请求参数，通过请求集合列表资源即可
	@RequestMapping(value="/yard/spd/spdReceives/code,{code}", method=RequestMethod.GET)
	public SpdReceiveBiz findByBizCode(@PathVariable(value = "code", required = false) String code, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		SpdReceiveBizParams params = new SpdReceiveBizParams();
		params.setBizCode(new ListParam<String>(code));
		
		PcsDepots depots = depotRepository.findAll().findByDept(user.getDeptId());
		if(depots.size()<=0){
			return new SpdReceiveBiz();
		}
		params.setToDepotId(new ListParam<String>(depots.getIds()));
		
		SpdReceiveBizs receives = rbRepository.find(params, new OrderParam(), - 1, -1);
		return CollectionUtils.isEmpty(receives)?new SpdReceiveBiz():receives.get(0);
	}
	
	/**
	 * 查找已经调度的收货记录
	 */
	@RequestMapping(value = "/yard/spd/dispatchers/{dispatcherId}/dispatchableReceives", method = RequestMethod.GET)
	public SpdReceiveBizs findDispatcherableReceives(@PathVariable("dispatcherId") String dispatcherId) {
		return rbService.findDispatchableReceives(dispatcherId);
	}

	@RequestMapping(value = "/yard/spd/dispatchers/{dispatcherId}/dispatchableReceives/count", method = RequestMethod.GET)
	public long getDispatcherableReceivesCount(@PathVariable("dispatcherId") String dispatcherId) {
		return rbService.findDispatchableReceives(dispatcherId).size();
	}

	/**
	 * 查找没有调度的收货记录
	 */
	@RequestMapping(value = "/yard/spd/dispatchers/{dispatcherId}/relationReceives", method = RequestMethod.GET)
	public SpdReceiveBizs findDispatcherRelationReceives(@PathVariable("dispatcherId") String dispatcherId) {
		return rbService.findDispatcherRelationReceives(dispatcherId);
	}

	@RequestMapping(value = "/yard/spd/dispatchers/{dispatcherId}/relationReceives/count", method = RequestMethod.GET)
	public long notDispatchedSpdReceivesCount(@PathVariable("dispatcherId") String dispatcherId) {
		return rbService.findDispatcherRelationReceives(dispatcherId).size();
	}

	@ResponseBody
	@RequestMapping(value="/yard/spd/spdReceives/bizId,{bizId}/pdf", method = RequestMethod.GET)
	public void getReceivePdf(@PathVariable("bizId")String bizId, HttpServletRequest request, HttpServletResponse response)throws Exception{
		SpdReceiveBiz receive = rbService.getFullReceive(bizId);
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		
		parameters.put("bizCode", receive.getBizCode());
		parameters.put("toOrgNm", receive.getToDepot().getManageDept().getOrg().getOrgName());
		parameters.put("fromOrgNm", receive.getFromDept().getOrg().getOrgName());
		parameters.put("toDepotNm", receive.getToDepot().getDepotName());
		parameters.put("toDeptNm", receive.getToDepot().getManageDept().getDeptName());
		parameters.put("confirmTime", receive.getMaintenanceInfo().getLastDate());
		
		ReportConfig config = giRepository.findAll().findByKey(YardGlobalInfo.completed_receives_report).getConfig();
		pdfExportHelper.export(config.getJasperFilePath()+".jasper", config.getPdfFileName(), parameters, receive.getItems(), "inline", response);
	}
	
	@ResponseBody
	@RequestMapping(value="/yard/spd/spdReceives/receDelivery/bizId,{bizId}/pdf", method = RequestMethod.GET)
	public void getReceDeliveryPdf(@PathVariable("bizId")String bizId, HttpServletRequest request, HttpServletResponse response)throws Exception{
		SpdReceiveBiz receive = rbService.getFullReceive(bizId);
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		
		parameters.put("bizCode", receive.getBizCode());
		parameters.put("toOrgNm", receive.getToDepot().getManageDept().getOrg().getOrgName());
		parameters.put("fromOrgNm", receive.getFromDept().getOrg().getOrgName());
		parameters.put("toDepotNm", receive.getToDepot().getDepotName());
		parameters.put("toDeptNm", receive.getToDepot().getManageDept().getDeptName());
		parameters.put("confirmTime", receive.getMaintenanceInfo().getLastDate());
		parameters.put("sendCode", receive.getSendCode());
		
		pdfExportHelper.export("/reports/deprecated/spdReceDelivery.jasper", "供应送货信息", parameters, receive.getItems(), "inline", response);
	}
	
	@RequestMapping(value="/yard/spd/spdReceives", method = RequestMethod.POST)
	public SpdReceiveBiz add(@RequestBody SpdReceiveBiz receive, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute("user");
		String accessToken = request.getAttribute(Constant.access_token_attr_name).toString();
		String clientType = PcsUserToken.getClientTypeFromAccessToken(accessToken);
		receive.setMaintenanceInfo(new MaintenanceInfo(user));
		receive.setChannelTypeCode(clientType);
		rbService.add(receive, user);
		return receive;
	}
	
}
