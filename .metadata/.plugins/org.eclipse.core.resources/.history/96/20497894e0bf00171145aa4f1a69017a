package cn.ak4j.yard.spd.stock.web;

import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.ListParam;
import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.exception.common.InvalidDataException;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.domain.Constant;
import cn.ak4j.yard.pcs.domain.PcsDepots;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.repository.PcsDepotRepository;
import cn.ak4j.yard.pcs.repository.PcsDepotShelfRepository;
import cn.ak4j.yard.spd.repository.SpdDepotCardRepository;
import cn.ak4j.yard.spd.stock.domain.SpdShelfStock;
import cn.ak4j.yard.spd.stock.domain.SpdShelfStocks;
import cn.ak4j.yard.spd.stock.params.SpdShelfStockParams;
import cn.ak4j.yard.spd.stock.repository.SpdShelfStockRepository;
import cn.ak4j.yard.yds.repository.YdsGoodsLotRepository;

/**
 * 货位库存
 * @Description:
 * @author wuyw
 * @date 2017年10月24日上午10:14:41
 *
 */
@RestController
public class SpdShelfStockResource {

	@Autowired private SpdShelfStockRepository ssRepository;
	@Autowired private YdsGoodsLotRepository glRepository;
	@Autowired private PcsDepotRepository depotRepository;
	@Autowired private PcsDepotShelfRepository dsRepository;
	@Autowired private SpdDepotCardRepository dcRepository;
	
	@RequestMapping(value="/yard/spd/spdShelfStocks")
	public SpdShelfStocks findShelfStocks(
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders,
			HttpServletRequest request){
		SpdShelfStockParams params = SpdShelfStockParams.buildParamsFromJson(paramsStr, SpdShelfStockParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		if(params == null){
			params = new SpdShelfStockParams();
		}
		if(order == null){
			order = new OrderParam("createTime","desc");
		}
		SpdShelfStocks shelfStocks = ssRepository.find(params, order, currentPage-1, pageSize);
		shelfStocks.fillGoodsLots(glRepository);
		shelfStocks.fillDepotShelf(dcRepository.findAll(), dsRepository.findAll());
		
		return shelfStocks;
	}
	
	@RequestMapping(value="/yard/spd/spdShelfStocks/count")
	public int countShelfStocks(
			@RequestParam(value = "params", required = false) String paramsStr,
			HttpServletRequest request){
		SpdShelfStockParams params = SpdShelfStockParams.buildParamsFromJson(paramsStr, SpdShelfStockParams.class);
		if(params == null){
			params = new SpdShelfStockParams();
		}
		
		return ssRepository.count(params);
	}
	
	@RequestMapping(value="/yard/spd/spdShelfStocks/mine")
	public SpdShelfStocks findUserManageShelfStocks(
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders,
			HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute(Constant.user_attr_name);
		SpdShelfStockParams params = SpdShelfStockParams.buildParamsFromJson(paramsStr, SpdShelfStockParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		if(params == null){
			params = new SpdShelfStockParams();
		}
		if(order == null){
			order = new OrderParam("createTime","desc");
		}
		
		PcsDepots depots = depotRepository.findAll().findByDept(user.getDeptId());
		if(CollectionUtils.isEmpty(depots)){
			new SpdShelfStocks();
		}
		params.setDepotId(new ListParam<String>(depots.getIds()));
		
		SpdShelfStocks shelfStocks = ssRepository.find(params, order, currentPage-1, pageSize);
		shelfStocks.fillGoodsLots(glRepository);
		shelfStocks.fillDepotShelf(dcRepository.findAll(), dsRepository.findAll());
		
		return shelfStocks;
	}
	
	@RequestMapping(value="/yard/spd/spdShelfStocks/mine/count")
	public int countUserManageShelfStocks(@RequestParam(value = "params", required = false) String paramsStr, HttpServletRequest request){
		PcsUser user = (PcsUser)request.getAttribute(Constant.user_attr_name);
		SpdShelfStockParams params = SpdShelfStockParams.buildParamsFromJson(paramsStr, SpdShelfStockParams.class);
		if(params == null){
			params = new SpdShelfStockParams();
		}
		
		PcsDepots depots = depotRepository.findAll().findByDept(user.getDeptId());
		if(CollectionUtils.isEmpty(depots)){
			new SpdShelfStocks();
		}
		params.setDepotId(new ListParam<String>(depots.getIds()));
		
		return ssRepository.count(params);
	}
	
	@RequestMapping(value="/yard/spd/spdDepotUseableShelfStocks", method = RequestMethod.GET)
	public List<SpdShelfStock> getDepotUseableShelfStock(
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders,
			HttpServletRequest request){
		SpdShelfStockParams params = SpdShelfStockParams.buildParamsFromJson(paramsStr, SpdShelfStockParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		if(params == null || params.getDepotId() == null || params.getDepotId().isEmpty()){
			throw new InvalidDataException("未指定仓库");
		}
		if(order == null){
			order = new OrderParam();
		}
		
		SpdShelfStocks shelfStocks = ssRepository.find(params);
		shelfStocks.fillGoodsLots(glRepository);
		shelfStocks.fillDepotShelf(dcRepository.findAll(), dsRepository.findAll());
		return shelfStocks.getUseableShelfStock().findByPage(params, order, currentPage-1, pageSize);
	}
	
	@RequestMapping(value="/yard/spd/spdDepotUseableShelfStocks/count", method = RequestMethod.GET)
	public int countDepotUseableShelfStock(@RequestParam(value = "params", required = false) String paramsStr,HttpServletRequest request){
		SpdShelfStockParams params = SpdShelfStockParams.buildParamsFromJson(paramsStr, SpdShelfStockParams.class);
		if(params == null || params.getDepotId() == null || params.getDepotId().isEmpty()){
			throw new InvalidDataException("未指定仓库");
		}
		SpdShelfStocks shelfStocks = ssRepository.find(params);
		shelfStocks.fillGoodsLots(glRepository);
		return shelfStocks.getUseableShelfStock().size();
	}

	@RequestMapping(value="/yard/spd/depots/{depotId}/shelfTypes/{shelfType}/spdShelfStocks/lotIds,{lotIds}", method = RequestMethod.GET)
	public SpdShelfStocks findShelfStockByDepotAndShelfTypess(@PathVariable("depotId") String depotId, 
			                                   @PathVariable("shelfType") String shelfType,
			                                   @PathVariable("lotIds") String lotIds){
		List<String> ids = Arrays.asList(lotIds.split(","));
		SpdShelfStocks shelfStocks = ssRepository.findByShelfTypeAndGoodsLots(depotId, shelfType, ids);
		shelfStocks.fillGoodsLots(glRepository);
		return shelfStocks;
	}
}
