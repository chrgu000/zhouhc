package cn.ak4j.yard.spd.reconciliation.domain;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import cn.ak4j.entity.Entities;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.utils.DateUtils;
import lombok.NoArgsConstructor;


@SuppressWarnings({"serial"})
@NoArgsConstructor
public class SpdPropertyChangeRecords extends Entities<SpdPropertyChangeRecord>{

	public SpdPropertyChangeRecords(List<SpdPropertyChangeRecord> entities){
		super(entities);
	}

	public void fillItems(SpdPropertyChangeRecordItems recordItems) {
		this.forEach(record->{
			SpdPropertyChangeRecordItems theRecordItems = new SpdPropertyChangeRecordItems(CollectionUtils.find("recordId", record.getId(), recordItems));
			record.setItems(theRecordItems);
		});
	}
	
	public SpdPropertyChangeRecords findByDepot(String depotId){
		SpdPropertyChangeRecords result = new SpdPropertyChangeRecords();
		for(SpdPropertyChangeRecord record : this){
			if(depotId.equals(record.getCreditDepotId()) || depotId.equals(record.getDebitDepotId())){
				result.add(record);
			}
		}
		return result;
	}

	public List<Date> getChangeDays() {
		List<Date> result = new ArrayList<Date>();
		
		this.forEach(changeRecord->{
			Date changeDay = DateUtils.setZeroTimePoint(changeRecord.getTargetDate());
			if(!result.contains(changeDay)){
				result.add(changeDay);
			}
		});
		Collections.sort(result, new Comparator<Date>() {
			public int compare(Date d1, Date d2) {
				return (int)(d1.getTime() - d2.getTime());
			}
			
		});
		return result;
	}

	public SpdPropertyChangeRecordItems getAllItems() {
		SpdPropertyChangeRecordItems result = new SpdPropertyChangeRecordItems();
		this.forEach(record->{
			result.addAll(record.getItems());
		});
		return result;
	}

	public void fillRules(SpdPropertyChangeRules rules) {
		this.forEach(record->{
			SpdPropertyChangeRule rule = rules.findById(record.getPropertyChangeRuleId());
			record.setRule(rule);
		});
		
	}
	
}
