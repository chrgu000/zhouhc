package cn.ak4j.yard.pcs.domain;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.beans.BeanUtils;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import cn.ak4j.exception.common.InvalidDataException;
import cn.ak4j.yard.domain.YardEntity;
import cn.ak4j.yard.enums.YardExceptionType;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

@Entity
@Table(name="PCS_ROLE_API")
@JsonIgnoreProperties(ignoreUnknown=true)
@Slf4j
@SuppressWarnings({"serial"})
public class PcsRoleApi extends YardEntity{

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "uuidGenerator")
	@GenericGenerator(name="uuidGenerator", strategy="uuid")
	@Getter @Setter
	private String id;
	
	@Getter @Setter
	private String roleId;
	
	@Getter @Setter
	private String uri;
	
	@Getter @Setter
	private String requestMethod;
	
	@Getter @Setter
	private Date createTime;
	
	@Getter @Setter
	private Date lastUpdateTime;
	
	public void update(PcsRoleApi roleApi) {
		if(checkTimeStamp(roleApi.getLastUpdateTime()) != 0){
			throw new InvalidDataException(YardExceptionType.invalid_inconsistent_timestamp, getLastUpdateTime().getTime(), roleApi.getLastUpdateTime().getTime());
		}
		try{
			BeanUtils.copyProperties(roleApi, this);
			updateLastUpdateTime();
		}catch(Exception e){
			log.error(ExceptionUtils.getStackTrace(e));
		}
	}
}
