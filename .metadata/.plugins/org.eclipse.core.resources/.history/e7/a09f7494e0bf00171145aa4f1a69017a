package cn.ak4j.yard.spd.supply.domain;

import java.util.Date;
import java.util.UUID;

import javax.validation.Valid;

import org.apache.commons.lang3.RandomStringUtils;
import org.hibernate.validator.constraints.NotEmpty;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;

import cn.ak4j.exception.common.InvalidDataException;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.domain.AbstractEntity;
import cn.ak4j.yard.enums.YardExceptionType;
import cn.ak4j.yard.pcs.domain.PcsDepot;
import cn.ak4j.yard.pcs.repository.PcsDepotRepository;
import cn.ak4j.yard.spd.bizplan.domain.SpdBizItem;
import cn.ak4j.yard.spd.bizplan.domain.SpdBizItems;
import cn.ak4j.yard.yds.domain.YdsEdsGoods;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

@NoArgsConstructor
@Slf4j
public class SpdDeliveryOrder extends AbstractEntity{

	@Getter @Setter
	private String orderId;//送货单ID
	
	@NotEmpty(message = "送货单号不能为空") @Getter @Setter
	private String orderNo;//送货单号
	
	@NotEmpty(message="仓库Id不能为空") @Getter @Setter
	private String depotId; // 仓库Id
	
	@NotEmpty(message="备货通知业务编码不能为空") @Getter @Setter
	private String prepareInformBizCode;
	
	@JsonIgnore @Getter @Setter
	private PcsDepot depot;
	
	@JsonFormat(pattern = "yyyy-MM-dd") @Getter @Setter
	private Date deliveryDate = new Date();
	
	@Valid @Getter @Setter
	private SpdDeliveryOrderItems items = new SpdDeliveryOrderItems();
	
	public SpdDeliveryOrder(String depotId, String prepareInformBizCode){
		this.orderId = UUID.randomUUID().toString().replaceAll("-", "").toUpperCase();
		this.depotId = depotId;
		this.prepareInformBizCode = prepareInformBizCode;
		this.orderNo =  "SH"+RandomStringUtils.random(10, false, true);
	}
	
	@JsonIgnore
	public PcsDepot getReceiveDepot(PcsDepotRepository depotRepository){
		PcsDepot receiveDepot =  depotRepository.findAll().findById(this.getDepotId());
		if(receiveDepot == null){
			throw new InvalidDataException(YardExceptionType.not_found_depot_id, this.getDepotId());
		}
		return receiveDepot;
	}

	@JsonIgnore
	public SpdDeliveryOrderItems whichItemNotSameUnitPrice(SpdBizItems prepareItems) {
		SpdDeliveryOrderItems notSameUnitPriceItems = new SpdDeliveryOrderItems();
		SpdDeliveryOrderItems orderItems = this.getItems();
		orderItems.forEach(orderItem->{
			SpdBizItem prepareItem = CollectionUtils.findWhere("goodsId", orderItem.getGoods().getGoodsId(), prepareItems);
			YdsEdsGoods edsGoods = orderItem.getEdsGoods();
			float preparePrice = prepareItem.getUnitPrice() * orderItem.getEdsGoods().getEdsYdsUnitRatio();
			if(preparePrice != orderItem.getUnitPrice()){
				log.warn("企业产品:{},备货价格:{}*{}, 送货单里的价格:{},价格不一致！", edsGoods.getEdsGoodsCode(), 
						prepareItem.getUnitPrice(), 
						orderItem.getEdsGoods().getEdsYdsUnitRatio(), 
						orderItem.getUnitPrice());
				notSameUnitPriceItems.add(orderItem);
			}
		});
		return notSameUnitPriceItems;
	}

}
