package cn.ak4j.yard.spd.wrapper.web;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.entity.query.param.QueryParams;
import cn.ak4j.yard.spd.params.SpdTurnoverBoxParams;
import cn.ak4j.yard.spd.wrapper.domain.SpdTurnoverBox;
import cn.ak4j.yard.spd.wrapper.domain.SpdTurnoverBoxs;
import cn.ak4j.yard.spd.wrapper.repository.SpdTurnoverBoxRepository;
import cn.ak4j.yard.sys.domain.ReportConfig;
import cn.ak4j.yard.sys.domain.YardGlobalInfo;
import cn.ak4j.yard.sys.repository.YardGlobalInfoRepository;
import cn.ak4j.yard.web.PdfExportHelper;

@RestController
public class SpdTurnoverBoxResource {
	
	@Autowired private SpdTurnoverBoxRepository tbRepository;
	@Autowired private PdfExportHelper pdfExportHelper;
	@Autowired private YardGlobalInfoRepository giRepository;

	@RequestMapping(value = "/yard/spd/spdTurnoverBoxs/{id}", method = RequestMethod.GET)
	public SpdTurnoverBox get(@PathVariable("id") String id) {
		return tbRepository.findAll().findById(id);
	}

	@RequestMapping(value = "/yard/spd/spdTurnoverBoxs", method = RequestMethod.GET)
	public SpdTurnoverBoxs list(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders) {
		SpdTurnoverBoxParams params = QueryParams.buildParamsFromJson(paramsStr, SpdTurnoverBoxParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		SpdTurnoverBoxs result = new SpdTurnoverBoxs(tbRepository.findAll().findByPage(params, order, currentPage - 1, pageSize));
		return result;
	}

	@RequestMapping(value = "/yard/spd/spdTurnoverBoxs/count", method = RequestMethod.GET)
	public long count(@RequestParam(value = "params", required = false) String paramsStr) {
		SpdTurnoverBoxParams params = QueryParams.buildParamsFromJson(paramsStr, SpdTurnoverBoxParams.class);
		return tbRepository.findAll().find(params).size();
	}

	@RequestMapping(value = "/yard/spd/spdTurnoverBoxs/ids,{ids}", method = RequestMethod.GET)
	public SpdTurnoverBoxs listByIds(@PathVariable(value = "ids", required = false) String ids) {
		return tbRepository.findAll().findByIds(Arrays.asList(ids.split(",")));
	}
	
	@ResponseBody
	@RequestMapping(value = "/yard/spd/spdTurnoverBoxs/turnoverBoxId,{turnoverBoxId}/pdf", method = RequestMethod.GET)
	public void getPdf(@PathVariable("turnoverBoxId")String turnoverBoxId,HttpServletRequest request,HttpServletResponse response)throws Exception{
		SpdTurnoverBox turnoverBox = tbRepository.findAll().findById(turnoverBoxId);
		
		Map<String,Object> parameters = new HashMap<String, Object>();
		parameters.put("turnoverBoxCode", turnoverBox.getWrapperNo());
		parameters.put("sysCode", turnoverBox.getSysCode().getMeterialCode());
		
		ReportConfig config = giRepository.findAll().findByKey(YardGlobalInfo.turnover_box_lable_report).getConfig();
		pdfExportHelper.export(config.getJasperFilePath()+".jasper", config.getPdfFileName(), parameters, null, "inline", response);
	}
	
}
