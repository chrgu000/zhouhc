package cn.ak4j.yard.spd.bizrule.domain;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import cn.ak4j.exception.common.InvalidDataException;
import cn.ak4j.yard.enums.PcsAreaType;
import cn.ak4j.yard.enums.YardExceptionType;
import cn.ak4j.yard.pcs.domain.PcsDepot;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.spd.bizplan.enums.SpdAdjustStockType;
import cn.ak4j.yard.spd.bizplan.enums.SpdBizType;
import cn.ak4j.yard.spd.bizrule.domain.feedbackrule.SpdAdjustStockFeedbackRule;
import cn.ak4j.yard.spd.reconciliation.domain.SpdPropertyChangeRules;
import lombok.Getter;
import lombok.Setter;

/**
* @Description: 库存调节业务规则
* @author zhengyf
* @date 2017年6月20日 下午5:44:03
* @version V1.0.0
*/
@Entity
@Table(name="spd_adjust_stock_rule")
@JsonIgnoreProperties(ignoreUnknown=true)
@SuppressWarnings("serial")
public class SpdAdjustStockRule extends SpdAbstractBizRule<SpdAdjustStockFeedbackRule>{

	@Getter @Setter @NotNull(message="调节仓库不能为空") 
	private String depotId;
	
	@Getter @Setter @NotNull(message="货区类型不能为空") 
	private String areaType;
	
	@Getter @Setter private Boolean initAdjust;
	
	@Getter @Setter @NotNull(message="调节类型不能为空") 
	private String typeCode;
	
	@Transient @Getter @Setter
	private PcsDepot depot;
	
	@Override
	public String getDescription() {
		if(depot != null){
			return String.format("%s%s区的%s的库存调节，系统流程为：%s", depot.getDepotName(), PcsAreaType.typeOf(areaType).getName(),
					                                                        SpdAdjustStockType.typeOf(typeCode).getName(),
																			getFeedbackRule().getDescription());
		}
		return "";
	}

	@Override
	public SpdBizType getBizType() {
		return SpdBizType.adjust_stock_biz;
	}

	@SuppressWarnings("rawtypes") @Override
	public boolean equalsRule(SpdAbstractBizRule theRule) {
		if(theRule.getBizType() != getBizType()){
			return false;
		}
		
		SpdAdjustStockRule rule = (SpdAdjustStockRule)theRule;
		if(getFeedbackRuleId().equals(rule.getFeedbackRuleId())
			&& getDepotId().equals(rule.getDepotId())
			&& getAreaType().equals(rule.getAreaType())
			&& getTypeCode().equals(rule.getTypeCode())
			&& getInitAdjust().equals(rule.getInitAdjust())  ){
			
			return true;
		}
		
		return false;
	}

	@Override
	public String getDisplayName() {
		return String.format("[%s]", getName());
	}

	@Override
	public boolean canApplyByUser(PcsUser user) {
		return getEnabled() && getDepot().getManageDeptId().equals(user.getDeptId());
	}
	
	@Override
	public void checkRule(SpdBizRules<?> allRules, SpdPropertyChangeRules allPropertyChangeRules) {
		if(getInitAdjust()){
			if(!getTypeCode().equals(SpdAdjustStockType.increment.getCode())){
				throw new InvalidDataException(YardExceptionType.invalid_init_adjust_stock_is_increment);
			}
		}
	}
	
	public boolean equals(Object obj){
		if(obj == null || !(obj instanceof SpdAdjustStockRule)){
			return false;
		}
		
		SpdAdjustStockRule rule = (SpdAdjustStockRule) obj;
		
		if(equalsRule(rule)
				&& getName().equals(rule.getName())
				&& getPrior().equals(rule.getPrior())
				&& getEnabled().equals(rule.getEnabled())
				&& getCanBeOriginRule().equals(rule.getCanBeOriginRule())
				&& getManualApply().equals(rule.getManualApply())
				){
			return true;
		}
		
		return false;
	}

	@SuppressWarnings("rawtypes") @Override
	public void update(SpdAbstractBizRule theRule) {
		SpdAdjustStockRule rule = (SpdAdjustStockRule) theRule;
		setName(rule.getName());
		setCustomName(rule.getCustomName());
		setPrior(rule.getPrior());
		setEnabled(rule.getEnabled());
		setCanBeOriginRule(rule.getCanBeOriginRule());
		setManualApply(rule.getManualApply());
	}

}
