package cn.ak4j.yard.spd.bizplan.service;

import java.util.Date;

import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.TransactionSynchronizationAdapter;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import cn.ak4j.exception.common.InvalidDataException;
import cn.ak4j.exception.common.NotFoundException;
import cn.ak4j.exception.common.OperateForbiddenException;
import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.IYardService;
import cn.ak4j.yard.amqp.RabbitProxy;
import cn.ak4j.yard.domain.CheckState;
import cn.ak4j.yard.domain.Constant;
import cn.ak4j.yard.domain.IUser;
import cn.ak4j.yard.enums.AmqpMsgType;
import cn.ak4j.yard.enums.SpdDepotTaskType;
import cn.ak4j.yard.enums.YardExceptionType;
import cn.ak4j.yard.pcs.domain.PcsDepot;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.repository.PcsDepotRepository;
import cn.ak4j.yard.spd.bizplan.domain.SpdAdjustStockBiz;
import cn.ak4j.yard.spd.bizplan.domain.SpdAdjustStockBizs;
import cn.ak4j.yard.spd.bizplan.domain.SpdBizItems;
import cn.ak4j.yard.spd.bizplan.enums.SpdAdjustStockType;
import cn.ak4j.yard.spd.bizplan.repository.SpdAdjustStockBizRepository;
import cn.ak4j.yard.spd.bizplan.repository.SpdBizItemRepository;
import cn.ak4j.yard.spd.bizrule.domain.SpdAdjustStockRule;
import cn.ak4j.yard.spd.bizrule.repository.SpdBizRuleRepository;
import cn.ak4j.yard.spd.domain.SpdGoodsQtys;
import cn.ak4j.yard.spd.repository.SpdDepotCardRepository;
import cn.ak4j.yard.spd.stock.domain.SpdShelfStockChanges;
import cn.ak4j.yard.spd.stock.service.SpdDepotStockService;
import cn.ak4j.yard.spd.task.domain.SpdDepotTasks;
import cn.ak4j.yard.spd.task.repository.SpdDepotTaskRepository;
import cn.ak4j.yard.sys.domain.CodeSort;
import cn.ak4j.yard.sys.service.YardCodeService;
import cn.ak4j.yard.yds.repository.YdsGoodsLotRepository;

@Service
public class SpdAdjustStockBizService extends IYardService<SpdAdjustStockBiz>{

	@Autowired private YardCodeService codeService;
	@Autowired private PcsDepotRepository depotRepository;
	@Autowired private SpdAdjustStockBizRepository asbRepository;
	@Autowired private SpdDepotTaskRepository dtRepository;
	@Autowired private SpdBizItemRepository biRepository;
	@Autowired private SpdDepotCardRepository dcRepository;
	@Autowired private SpdBizRuleRepository brRepository;
	@Autowired private YdsGoodsLotRepository glRepository;
	@Autowired private RabbitProxy rabbitProxy;
	@Autowired private SpdDepotStockService dsService;
	
	@Transactional public SpdAdjustStockBiz add(@Valid SpdAdjustStockBiz adjustStock, IUser user) {
		SpdAdjustStockRule rule = brRepository.findAllWithRelations().getAllAdjustStockRules().findById(adjustStock.getBizRuleId());
		if(rule == null){
			throw new NotFoundException(YardExceptionType.not_found_adjust_stock_rule, String.format("[id:%s]", adjustStock.getBizRuleId()));
		}
		//设置业务规则
		if(StringUtils.isEmpty(adjustStock.getBizRuleId())){
			adjustStock.autoFillBizRule(brRepository.findAllWithRelations());
		}
		
		adjustStock.applyRule(rule, (PcsUser)user);
		
		if(!adjustStock.isValid()){
			throw new InvalidDataException(adjustStock.getValidateMsg());
		}
		
		TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
			public void afterCommit(){
				rabbitProxy.sendBizMsg(adjustStock.getBizId(), null, user.getUserId(), AmqpMsgType.CREATE_ADJUST_STOCK_BIZ);
            }
		});
		
		adjustStock.setBizCode(codeService.publishCode(CodeSort.kucuntiaojiedan).getCode());
		asbRepository.saveWithItems(adjustStock);
		return adjustStock;
	}

	@Override @Transactional
	public void delete(String bizId, IUser user) {
		SpdAdjustStockBiz  adjustStockBizPO = asbRepository.getWithItems(bizId);
		if (!adjustStockBizPO.canDelete()){
			throw new OperateForbiddenException(YardExceptionType.forbide_delete, adjustStockBizPO.getBizCode());
		}
	
		asbRepository.delete(adjustStockBizPO);
		
		if(adjustStockBizPO.hasItems()){
			biRepository.delete(adjustStockBizPO.getItems());	
		}
	}

	@Override
	public SpdAdjustStockBiz modify(SpdAdjustStockBiz t, IUser user) {
		throw new UnsupportedOperationException(Constant.service_method_not_support_msg);
	}

	@Transactional public SpdAdjustStockBiz updateCheckState(String bizId, int checkStateCode, Date lastUpdateDate, IUser user) {
		SpdAdjustStockBiz adjustStock = asbRepository.findOne(bizId);
		fillAllRelations(adjustStock);
		if(checkStateCode == CheckState.commited.getCode()){
			return commit(adjustStock, lastUpdateDate, user);
		}else if(checkStateCode == CheckState.reviewed.getCode()){
			return review(adjustStock, lastUpdateDate, user);
		}
		return null;
	}

	@Transactional public SpdAdjustStockBiz commit(SpdAdjustStockBiz adjustStock, Date lastUpdateDate, IUser user){
		SpdBizItems items = biRepository.findWithGoodsByBizId(adjustStock.getBizId());
		if(CollectionUtils.isEmpty(items)){
			throw new InvalidDataException(YardExceptionType.invalid_item_not_data, String.format("库存调节[%s]", adjustStock.getBizCode()));
		}else{
			if(!items.isAllPlaned()){
				throw new InvalidDataException(YardExceptionType.invalid_item_not_confirm, String.format("库存调节[%s]", adjustStock.getBizCode()));
			}
		}
		
		TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
			public void afterCommit(){
				rabbitProxy.sendBizMsg(adjustStock.getBizId(), null, user.getUserId(), AmqpMsgType.COMMIT_ADJUST_STOCK_BIZ);
            }
		});
		adjustStock.commit(lastUpdateDate, user);
		asbRepository.save(adjustStock);
		return adjustStock;
	}

	@Transactional public SpdAdjustStockBiz review(SpdAdjustStockBiz adjustStock, Date lastUpdateDate, IUser user) {
		if(!adjustStock.hasItems()){
			throw new InvalidDataException(YardExceptionType.invalid_item_not_data, String.format("库存调节[%s]", adjustStock.getBizCode()));
		}
		//检查库存调节明细是否已确认
		if(!adjustStock.getItems().isAllConfirmed()){
			throw new InvalidDataException(YardExceptionType.invalid_item_not_confirm, String.format("库存调节[%s]", adjustStock.getBizCode()));
		}
		
		TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
			public void afterCommit(){
				rabbitProxy.sendBizMsg(adjustStock.getBizId(), null, user.getUserId(), AmqpMsgType.REVIEW_ADJUST_STOCK_BIZ);
            }
		});

		//库存扣减类型的库存调节需要根据实际可用产品数量增加货位锁库存
		if(adjustStock.getAdjustType() == SpdAdjustStockType.decrement){
			SpdGoodsQtys planQtyByStoreUnit = new SpdGoodsQtys(adjustStock.getItems().getPlanGoodsQtysByStoreUnit());
			SpdGoodsQtys realQtyByStoreUnit = new SpdGoodsQtys(dsService.findRealShelfStoreUnitStocks(adjustStock.getDepotId(), adjustStock.getAreaType(), planQtyByStoreUnit));
			if(!planQtyByStoreUnit.isQtyEquals(realQtyByStoreUnit)){
				throw new InvalidDataException(YardExceptionType.invalid_shelf_stocks_not_enough, adjustStock.getDepot().getDepotName(), planQtyByStoreUnit.diff(realQtyByStoreUnit)+"库存不足,调节失败!");
			}
			adjustStock.getDepot().fillCards(dcRepository);
			SpdShelfStockChanges stockChanges = new SpdShelfStockChanges(adjustStock.getDepot(), adjustStock.getAreaType(), realQtyByStoreUnit);
			dsService.scheduleDecrementShelfStocks(stockChanges, adjustStock.getBizId());
			
			//根据实际可用产品数量校验库存调节明细的确认数量
			adjustStock.getItems().verifyConfirmQtyWithRealQty(realQtyByStoreUnit);
		}
		
		adjustStock.updateCheckState(CheckState.reviewed.getCode(), lastUpdateDate, user.getOrgId(), user.getUserId());
		asbRepository.save(adjustStock);
			
		return adjustStock;
	}

	public void fillAllRelations(SpdAdjustStockBiz adjustStock) {
		adjustStock.setItems(biRepository.findWithGoodsByBizId(adjustStock.getBizId()));
		adjustStock.getItems().fillUnuseableGoodsLot(glRepository);
		
		SpdDepotTasks depotTasks = dtRepository.findWithItemsByBizId(adjustStock.getBizId());
		SpdDepotTasks offShelfTasks = new SpdDepotTasks(CollectionUtils.find("taskType", SpdDepotTaskType.off_shelf_task.getCode(), String.class, depotTasks));
		adjustStock.setOffShelfTasks(offShelfTasks);
		
		SpdDepotTasks onShelfTasks = new SpdDepotTasks(CollectionUtils.find("taskType", SpdDepotTaskType.on_shelf_task.getCode(), String.class, depotTasks));
		adjustStock.setOnShelfTasks(onShelfTasks);
		
		PcsDepot depot = depotRepository.findAllWithRelations().findById(adjustStock.getDepotId());
		depot.fillCards(dcRepository);
		adjustStock.setDepot(depot);
		
		SpdAdjustStockRule rule = (SpdAdjustStockRule)(brRepository.findAllWithRelations().findById(adjustStock.getBizRuleId()));
		adjustStock.setBizRule(rule);
	}

	public SpdAdjustStockBiz getFullAdjustStock(String bizId) {
		SpdAdjustStockBiz adjustStock = asbRepository.getWithItems(bizId);
		fillAllRelations(adjustStock);
		return adjustStock;
	}

	@Transactional public void batchAdd(SpdAdjustStockBizs adjustStocks, PcsUser user) {
		adjustStocks.forEach(adjustStock->{
			add(adjustStock, user);
		});
	}

	
}
