package cn.ak4j.yard.pcs.web;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.entity.query.param.QueryParams;
import cn.ak4j.yard.enums.YardChannelType;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.pcs.domain.PcsUserToken;
import cn.ak4j.yard.pcs.domain.PcsUsers;
import cn.ak4j.yard.pcs.params.PcsUserParams;
import cn.ak4j.yard.pcs.repository.PcsUserRepository;
import cn.ak4j.yard.pcs.repository.PcsUserTokenRepository;
import cn.ak4j.yard.pcs.service.PcsUserService;

@RestController
public class PcsUserResource {

	@Autowired private PcsUserService pcsUserService;
	@Autowired private PcsUserRepository userRepository;
	@Autowired private PcsUserTokenRepository pcsUserTokenRepository;
	
	@RequestMapping(value = "/yard/pcs/accessTokens", method = RequestMethod.POST, params={"userCode", "password"})
	public Map<String,String> createAccessToken(@RequestParam(value = "userCode") String userCode,
												@RequestParam(value = "password") String password,
												@RequestParam(value="clientType", required=false) String clientType) throws JsonParseException, JsonMappingException, IOException {
		if(StringUtils.isEmpty(clientType)){
			clientType = YardChannelType.spd_web.getCode();
		}
		Map<String, String> result = new HashMap<String, String>();
		String accessToken = pcsUserService.createAccessToken(userCode, password, clientType);
		result.put("accessToken", accessToken);
		return result;
	}
	
	@RequestMapping(value = "/yard/pcs/accessTokens", method = RequestMethod.POST)
	public Map<String,String> createAccessToken(@RequestBody Map<String, String> accountInfo) throws JsonParseException, JsonMappingException, IOException {
		String userCode = accountInfo.get("userCode");
		String password = accountInfo.get("password");
		String clientType = accountInfo.get("clientType");
		clientType = StringUtils.isNotEmpty(clientType)?clientType:YardChannelType.spd_web.getCode();
		Map<String, String> result = new HashMap<String, String>();
		String accessToken = pcsUserService.createAccessToken(userCode, password, clientType);
		result.put("accessToken", accessToken);
		return result;
	}
	
	@RequestMapping(value="/yard/pcs/accessTokens/{accessToken}/userToken", method=RequestMethod.GET)
	public PcsUserToken getAccessTokenInfo(@PathVariable("accessToken")String accessToken){
		PcsUser user = pcsUserService.getUserWithAccessToken(accessToken);
		PcsUserToken userToken = pcsUserTokenRepository.findByUserIdAndClientType(user.getUserId(), PcsUserToken.getClientTypeFromAccessToken(accessToken));
		return userToken;
	}
	
	@RequestMapping(value="/yard/pcs/accessTokens/{accessToken}/refreshLastTime", method=RequestMethod.PUT)
	public String updateRefreshLastTime(@PathVariable("accessToken")String accessToken){
		PcsUser user = pcsUserService.getUserWithAccessToken(accessToken);
		String clientType = PcsUserToken.getClientTypeFromAccessToken(accessToken);
		pcsUserService.updateTokenRefreshTime(user.getUserId(), clientType);
		return "";
	}

	@RequestMapping(value = "/yard/pcs/pcsUsers/mine", method = RequestMethod.GET)
	public PcsUser getMineUser(HttpServletRequest request) {
		PcsUser user = (PcsUser) request.getAttribute("user");
		return user;
	}
	
//	@RequestMapping(value = "/yard/pcs/pcsUsers/count", method = RequestMethod.GET)
//	public int getCount(@RequestParam(value = "params", required = false) String paramsStr) {
//		PcsUserParams params = QueryParams.buildParamsFromJson(paramsStr, PcsUserParams.class);
//		return userRepository.findAll().find(params).size();
//	}
	
	@RequestMapping(value = "/yard/pcs/pcsUsers/{userId}", method = RequestMethod.GET)
	public PcsUser findOne(@PathVariable(value = "userId") String userId){
		return userRepository.findAll().findById(userId);
	}
	
	@RequestMapping(value = "/yard/pcs/pcsUsers/ids,{ids}", method = RequestMethod.GET)
	public PcsUsers getByIds(@PathVariable("ids")String ids){
		return userRepository.findAll().findByIds(Arrays.asList(ids.split(",")));
	}

	@RequestMapping(value = "/yard/pcs/pcsUsers", method = RequestMethod.GET)
	public PcsUsers list(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders) {
		PcsUserParams params = QueryParams.buildParamsFromJson(paramsStr, PcsUserParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		
		if(params == null){
			params = new PcsUserParams();
		}
		return pcsUserService.findUsers(params, order, currentPage-1, pageSize);
	}
	
	@RequestMapping(value = "/yard/pcs/pcsUsers/count", method = RequestMethod.GET)
	public int count(@RequestParam(value = "params", required = false) String paramsStr) {
		PcsUserParams params = QueryParams.buildParamsFromJson(paramsStr, PcsUserParams.class);
		if(params == null){
			params = new PcsUserParams();
		}
		return pcsUserService.count(params);
	}
	
}
