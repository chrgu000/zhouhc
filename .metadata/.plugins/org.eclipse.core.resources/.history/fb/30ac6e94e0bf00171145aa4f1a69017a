package cn.ak4j.yard.spd.task.domain;

import java.util.Date;
import java.util.List;

import javax.persistence.DiscriminatorColumn;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import cn.ak4j.utils.CollectionUtils;
import cn.ak4j.yard.domain.CheckState;
import cn.ak4j.yard.domain.MaintenanceInfo;
import cn.ak4j.yard.domain.StateFlowTemplates;
import cn.ak4j.yard.domain.YardMaintenceEntity;
import cn.ak4j.yard.pcs.domain.PcsDepot;
import cn.ak4j.yard.pcs.domain.PcsUser;
import cn.ak4j.yard.spd.bizplan.domain.SpdReplenishBiz;
import cn.ak4j.yard.spd.domain.IStockChangeable;
import cn.ak4j.yard.spd.stock.domain.SpdDepotStockChange;
import cn.ak4j.yard.spd.stock.domain.SpdDepotStockChanges;
import cn.ak4j.yard.spd.wrapper.domain.SpdWrappers;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
* @Description: 物流作业
* @author zhengyf
* @date 2017年4月2日 下午5:41:45
* @version V1.0.0
*/

@NoArgsConstructor
@Entity
@Table(name="SPD_LOGISTICS_TASK")
@Inheritance(strategy=InheritanceType.SINGLE_TABLE) 
@DiscriminatorColumn(name="TASK_TYPE")
@JsonIgnoreProperties(ignoreUnknown=true)
@SuppressWarnings({"serial"})
public class SpdLogisticsTask extends YardMaintenceEntity implements IStockChangeable<SpdDepotStockChanges>{

	@Transient @Getter
	private final String stateFlow = StateFlowTemplates.statesFlow_n_c_r_f;//新增_审核
	
	public static final String logistics_task_type_delivery = "delivery";
	public static final String logistics_task_type_receive = "receive";
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "uuidGenerator")
	@GenericGenerator(name="uuidGenerator", strategy="uuid")
	@Getter @Setter
	private String taskId;
	
	@Getter @Setter
	private String bizId;
	
	@Getter @Setter
	private String taskCode;
	
	@Getter @Setter
	private String fromOrgId;
	
	@Getter @Setter
	private String fromDepotId;
	
	@Getter @Setter
	private String toOrgId;
	
	@Getter @Setter
	private String toDepotId;
	
	@Getter @Setter
	private Date deliveryTime;//送货时间
	
	@Transient @JsonIgnore @Getter @Setter
	private SpdLogisticsTaskItems items;
	
	@Getter @Setter
	private Integer checkStateCode = CheckState.new_created.getCode();
	
	@Embedded @Getter @Setter
	private MaintenanceInfo maintenanceInfo;
	
	@Transient @JsonIgnore @Getter @Setter
	private PcsDepot fromDepot;
	
	@Transient @JsonIgnore @Getter @Setter
	private PcsDepot toDepot;
	
	@Transient @JsonIgnore @Getter @Setter
	private SpdReplenishBiz biz;

	@Transient @JsonIgnore @Getter @Setter
	private SpdWrappers wrappers;
	
	@Transient @JsonIgnore @Getter @Setter
	private PcsUser createUser;
	
	public SpdLogisticsTask(String bizId, PcsDepot fromDepot, PcsDepot toDepot){
		setBizId(bizId);
		setFromDepot(fromDepot);
		setFromDepotId(fromDepot.getDepotId());
		setFromOrgId(fromDepot.getManageOrgId());
		setToDepot(toDepot);
		setToDepotId(toDepot.getDepotId());
		setToOrgId(toDepot.getManageOrgId());
	}
	
	public void updateAllItemId(){
		getItems().forEach(item->{
			item.setTaskId(taskId);
		});
	}
	
	@Transient @JsonIgnore
	public PcsDepot getStockChangeDepot(){
		return toDepot;	
	}
	
	@Transient @JsonIgnore
	public String getTargetAreaType(){
		return biz.getToAreaType();
	}
	
	public SpdDepotStockChanges getStockChanges(){
		SpdDepotStockChanges changes = new SpdDepotStockChanges();
		if(CollectionUtils.isEmpty(items)){
			return changes;
		}
		SpdLogisticsTaskItems items = getItems();
		List<String> lotIds = CollectionUtils.pluck("lotId", items);
		for(String lotId : lotIds){
			SpdLogisticsTaskItem item = CollectionUtils.findWhere("lotId", lotId, items);
			SpdDepotStockChange change = new SpdDepotStockChange();
			int qtyByStoreUnit = items.getSameLotConfirmQtyByStoreUnit(lotId);
			change.setQtyByStoreUnit(qtyByStoreUnit);
			change.setGoodsLot(item.getSpecialGoodsLot());
			changes.add(change);
		}
		return changes;
	}
	
	public void commit(Date lastUpdateTime, PcsUser user){
		super.commit(lastUpdateTime, user);
		setDeliveryTime(new Date());
	}

}
