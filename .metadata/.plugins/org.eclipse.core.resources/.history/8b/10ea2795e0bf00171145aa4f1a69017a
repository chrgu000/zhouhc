package cn.ak4j.yard.pcs.web;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import cn.ak4j.entity.query.param.ListParam;
import cn.ak4j.entity.query.param.OrderParam;
import cn.ak4j.entity.query.param.QueryParams;
import cn.ak4j.yard.pcs.domain.PcsDepotArea;
import cn.ak4j.yard.pcs.domain.PcsDepotAreas;
import cn.ak4j.yard.pcs.params.PcsDepotAreaParams;
import cn.ak4j.yard.pcs.repository.PcsDepotAreaRepository;

@RestController
public class PcsDepotAreaResource {

	@Autowired
	private PcsDepotAreaRepository daRepository;

	@RequestMapping(value = "/yard/pcs/pcsDepotAreas", method = RequestMethod.GET)
	public PcsDepotAreas list(@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "20") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders) {
		PcsDepotAreaParams params = QueryParams.buildParamsFromJson(paramsStr, PcsDepotAreaParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		return new PcsDepotAreas(daRepository.findAllWithRelation().findByPage(params, order, currentPage-1, pageSize));
	}

	@RequestMapping(value = "/yard/pcs/pcsDepotAreas/count", method = RequestMethod.GET)
	public long count(@RequestParam(value = "params", required = false) String paramsStr) {
		PcsDepotAreaParams params = QueryParams.buildParamsFromJson(paramsStr, PcsDepotAreaParams.class);
		return daRepository.findAllWithRelation().find(params).size();
	}
	
	@RequestMapping(value = "/yard/pcs/pcsDepotAreas/ids,{ids}", method = RequestMethod.GET)
	public PcsDepotAreas listByIds(@PathVariable(value = "ids", required = false) String ids) {
		PcsDepotAreaParams params = new PcsDepotAreaParams();
		params.setDepotAreaId(new ListParam<String>(Arrays.asList(ids.split(","))));
		return new PcsDepotAreas(daRepository.findAllWithRelation().find(params));
	}
	
	@RequestMapping(value = "/yard/pcs/pcsDepotAreas/depotId,{depotId}", method = RequestMethod.GET)
	public PcsDepotAreas findByDepot(@PathVariable("depotId") String depotId,
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "pageSize", required = false, defaultValue = "100") int pageSize,
			@RequestParam(value = "params", required = false) String paramsStr,
			@RequestParam(value = "orders", required = false) String orders) {
		PcsDepotAreaParams params = PcsDepotAreaParams.buildParamsFromJson(paramsStr, PcsDepotAreaParams.class);
		OrderParam order = OrderParam.buildFromJson(orders);
		if(params == null){
			params = new PcsDepotAreaParams();
		}
		params.setDepotId(new ListParam<String>(depotId));
		return new PcsDepotAreas(daRepository.findAllWithRelation().findByPage(params, order, currentPage-1, pageSize));
	}

	@RequestMapping(value = "/yard/pcs/pcsDepotAreas/depotId,{depotId}/count", method = RequestMethod.GET)
	public long findByDepotCount(@PathVariable("depotId") String depotId) {
		PcsDepotAreaParams params = new PcsDepotAreaParams();
		params.setDepotId(new ListParam<String>(depotId));
		return daRepository.findAllWithRelation().find(params).size();
	}
	
	@RequestMapping(value = "/yard/pcs/pcsDepotAreas/{depotAreaId}", method = RequestMethod.GET)
	public PcsDepotArea findOne(@PathVariable("depotAreaId") String depotAreaId) {
		return daRepository.findAllWithRelation().findById(depotAreaId);
	}

}
