package cn.ak4j.yard;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import javax.sql.DataSource;

import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.runner.RunWith;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.CacheManager;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.jdbc.datasource.init.ScriptStatementFailedException;
import org.springframework.jdbc.datasource.init.ScriptUtils;
import org.springframework.mock.http.MockHttpOutputMessage;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.web.context.WebApplicationContext;

import cn.ak4j.Global;
import cn.ak4j.yard.domain.Conf;
import cn.ak4j.yard.enums.YardChannelType;
import cn.ak4j.yard.pcs.domain.PcsOrg;
import cn.ak4j.yard.pcs.repository.PcsOrgRepository;
import cn.ak4j.yard.sys.repository.YardGlobalInfoRepository;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Ignore
@RunWith(SpringRunner.class)
@SpringBootTest(classes=Application.class)
@WebAppConfiguration
@ActiveProfiles(resolver=SystemPropertyActiveProfileResolver.class)
@SuppressWarnings({"rawtypes", "unchecked"})
public class BaseTest {

    private HttpMessageConverter mappingJackson2HttpMessageConverter;
	protected MockMvc mockMvc;
	protected MockMvcHelper mockMvcHelper;

	@Autowired private DataSource dataSource;
	@Autowired private CacheManager cacheManager;
	@Autowired protected Conf conf;
	@Autowired private TestConf testConf;
	@Autowired protected AMQPMsgs msgs;
	
	@Autowired @Qualifier("yardRabbitAdmin")
	private RabbitAdmin rabbitAdmin;
	
	@Autowired private WebApplicationContext webApplicationContext;
	
	@Autowired private PcsOrgRepository orgRepository;
	@Autowired private YardGlobalInfoRepository giRepository;
	
	private PcsOrg mainOrg;
	
	protected String orgId = "626";
	protected String xykUserCode = "xyk";
	protected String xyfUserCode = "xyf";
	protected String eisUserCode = "eis";
	protected String nxykUserCode = "nxyk";
	protected String eisPassword = "eis_ak1234";
	protected String testUserCode = "test";
	protected String mzmanagerUserCode = "mzmanager";
	protected String yhmanagerUserCode = "yhmanager";
	protected String zsyUserCode = "zsy";
	protected String gyUserCode = "gy001";
	protected String yjUserCode = "yj001";

	protected String eisUserId = "user_id_001";
	protected String xykUserId = "user_id_002";
	protected String xyfUserId = "user_id_003";
	protected String nxykUserId = "user_id_011";
	protected String testUserId = "626";
	protected String mzmanagerUserId = "user_id_005";
	protected String yhmanagerUserId = "user_id_006";
	protected String zsyUserId = "user_id_007";
	protected String gyUserId = "user_id_009";
	protected String yjUserId = "user_id_008";
	private static String sqlScript = null;
	
	@Before
	public void before() throws Exception{
		this.mockMvc = webAppContextSetup(webApplicationContext).build();
		this.mockMvcHelper = new MockMvcHelper(mockMvc);
		
		//重置缓存
		cacheManager.getCacheNames().forEach(cacheName->{
			cacheManager.getCache(cacheName).clear();
		});
		
		//重置消息集合
		msgs.clear();
		
		//重置数据库
		File sqlDir = new File(BaseTest.class.getResource("/data/").toURI());
		if(sqlScript == null){
			StringBuffer buf = new StringBuffer();
			Iterator<File> files = FileUtils.iterateFiles(sqlDir, new String[]{"sql"}, false);
			while(files.hasNext()){
				File sqlFile = files.next();
				buf.append(FileUtils.readFileToString(sqlFile, Global.defaultCharset));
			}
			sqlScript = buf.toString();
		}
		
		Connection conn = dataSource.getConnection();
		boolean scripteExecuted = false;
		int tryCount = 10;
		while(!scripteExecuted && tryCount > 0){
			try{
				conn.setAutoCommit(false);
				ScriptUtils.executeSqlScript(conn, new ByteArrayResource(sqlScript.getBytes(Global.defaultCharset)));
				conn.commit();
				scripteExecuted = true;
			}catch(ScriptStatementFailedException statementFailEx){
				if(statementFailEx.getMessage().contains("ORA-00060")){
					log.warn("发现数据库死锁，尝试等待[{}]", tryCount);
					scripteExecuted = false;
					wait(1);
					tryCount--;
				}else{
					throw statementFailEx;
				}
			}catch(SQLException e){
				conn.rollback();
			}finally{
				conn.close();
			}
		}
//		rabbitAdmin.purgeQueue("batch_task", false);
//		rabbitAdmin.purgeQueue("eis_queue", false);
//		rabbitAdmin.purgeQueue("settlement_biz_queue", false);
//		rabbitAdmin.purgeQueue("spd_biz_queue", false);
		Conf.setAllGlobalInfos(giRepository.findAll());
	}
	
	protected String getAccessToken(String userCode) throws Exception{
		return getAccessToken(userCode, "ak1234");
	}
	
	protected String getAccessToken(String userCode, String password) throws Exception{
		String urlTemplate = getUrlTemplate("/pcs/accessTokens?userCode={userCode}&password={password}&clientType={clientType}");
		String clientType = userCode.equals(eisUserCode)?YardChannelType.eis.getCode():YardChannelType.spd_web.getCode();
		MvcResult result = mockMvc.perform(post(urlTemplate, userCode, userCode.equals(eisUserCode)?eisPassword:password, clientType)).andReturn();
		Map map = Global.defaultObjectMapper.readValue(result.getResponse().getContentAsString(), Map.class);
		String accessToken = (String)map.get("accessToken");
		return accessToken;
	}
	
	protected PcsOrg getMainOrg(){
		if(mainOrg == null){
			mainOrg = orgRepository.findAll().getMainOrg();
		}
		return mainOrg;
	}
	
	protected String json(Object o) throws IOException {
        MockHttpOutputMessage mockHttpOutputMessage = new MockHttpOutputMessage();
        this.mappingJackson2HttpMessageConverter.write(
                o, MediaType.APPLICATION_JSON, mockHttpOutputMessage);
        return mockHttpOutputMessage.getBodyAsString();
    }
	
	protected void wait(int seconds){
		try {
			TimeUnit.MILLISECONDS.sleep((int)(seconds*1000*testConf.getWaitTimeRatio()));
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	protected String getUrlTemplate(String uri){
		return "http://localhost:9000/yard"+uri;
	}

	protected String getCurrentDateCode(){
		return Global.yyMMddDF.format(Global.defaultCalendar.getTime());
	}
	
}

